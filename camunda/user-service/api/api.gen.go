// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/Nesquiko/aass/common/server/api"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for SpecializationEnum.
const (
	Cardiologist        SpecializationEnum = "cardiologist"
	Dermatologist       SpecializationEnum = "dermatologist"
	Diagnostician       SpecializationEnum = "diagnostician"
	Endocrinologist     SpecializationEnum = "endocrinologist"
	Gastroenterologist  SpecializationEnum = "gastroenterologist"
	GeneralPractitioner SpecializationEnum = "general_practitioner"
	Neurologist         SpecializationEnum = "neurologist"
	Oncologist          SpecializationEnum = "oncologist"
	Orthopedist         SpecializationEnum = "orthopedist"
	Other               SpecializationEnum = "other"
	Pediatrician        SpecializationEnum = "pediatrician"
	Psychiatrist        SpecializationEnum = "psychiatrist"
	Radiologist         SpecializationEnum = "radiologist"
	Surgeon             SpecializationEnum = "surgeon"
	Urologist           SpecializationEnum = "urologist"
)

// Defines values for UserRole.
const (
	UserRoleDoctor  UserRole = "doctor"
	UserRolePatient UserRole = "patient"
)

// Doctor defines model for Doctor.
type Doctor struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        openapi_types.UUID  `json:"id"`
	LastName  string              `json:"lastName"`
	Role      UserRole            `json:"role"`

	// Specialization Medical specialization of a doctor.
	Specialization SpecializationEnum `json:"specialization"`
}

// DoctorRegistration defines model for DoctorRegistration.
type DoctorRegistration struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
	Role      UserRole            `json:"role"`

	// Specialization Medical specialization of a doctor.
	Specialization SpecializationEnum `json:"specialization"`
}

// Patient defines model for Patient.
type Patient struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        openapi_types.UUID  `json:"id"`
	LastName  string              `json:"lastName"`
	Role      UserRole            `json:"role"`
}

// PatientRegistration defines model for PatientRegistration.
type PatientRegistration struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
	Role      UserRole            `json:"role"`
}

// Registration defines model for Registration.
type Registration struct {
	union json.RawMessage
}

// SpecializationEnum Medical specialization of a doctor.
type SpecializationEnum string

// User defines model for User.
type User struct {
	union json.RawMessage
}

// UserRole defines model for UserRole.
type UserRole string

// DoctorId defines model for doctorId.
type DoctorId = openapi_types.UUID

// PatientId defines model for patientId.
type PatientId = openapi_types.UUID

// Doctors defines model for Doctors.
type Doctors struct {
	Doctors []Doctor `json:"doctors"`
}

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody struct {
	// Email User's email address.
	Email openapi_types.Email `json:"email"`
	Role  UserRole            `json:"role"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody LoginUserJSONBody

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = Registration

// AsPatientRegistration returns the union data inside the Registration as a PatientRegistration
func (t Registration) AsPatientRegistration() (PatientRegistration, error) {
	var body PatientRegistration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatientRegistration overwrites any union data inside the Registration as the provided PatientRegistration
func (t *Registration) FromPatientRegistration(v PatientRegistration) error {
	v.Role = "patient"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatientRegistration performs a merge with any union data inside the Registration, using the provided PatientRegistration
func (t *Registration) MergePatientRegistration(v PatientRegistration) error {
	v.Role = "patient"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDoctorRegistration returns the union data inside the Registration as a DoctorRegistration
func (t Registration) AsDoctorRegistration() (DoctorRegistration, error) {
	var body DoctorRegistration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDoctorRegistration overwrites any union data inside the Registration as the provided DoctorRegistration
func (t *Registration) FromDoctorRegistration(v DoctorRegistration) error {
	v.Role = "doctor"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDoctorRegistration performs a merge with any union data inside the Registration, using the provided DoctorRegistration
func (t *Registration) MergeDoctorRegistration(v DoctorRegistration) error {
	v.Role = "doctor"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Registration) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"role"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Registration) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "doctor":
		return t.AsDoctorRegistration()
	case "patient":
		return t.AsPatientRegistration()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Registration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Registration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatient returns the union data inside the User as a Patient
func (t User) AsPatient() (Patient, error) {
	var body Patient
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatient overwrites any union data inside the User as the provided Patient
func (t *User) FromPatient(v Patient) error {
	v.Role = "patient"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatient performs a merge with any union data inside the User, using the provided Patient
func (t *User) MergePatient(v Patient) error {
	v.Role = "patient"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDoctor returns the union data inside the User as a Doctor
func (t User) AsDoctor() (Doctor, error) {
	var body Doctor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDoctor overwrites any union data inside the User as the provided Doctor
func (t *User) FromDoctor(v Doctor) error {
	v.Role = "doctor"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDoctor performs a merge with any union data inside the User, using the provided Doctor
func (t *User) MergeDoctor(v Doctor) error {
	v.Role = "doctor"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t User) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"role"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t User) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "doctor":
		return t.AsDoctor()
	case "patient":
		return t.AsPatient()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t User) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *User) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User Login
	// (POST /auth/login)
	LoginUser(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /auth/register)
	RegisterUser(w http.ResponseWriter, r *http.Request)
	// Get doctors
	// (GET /doctors)
	GetDoctors(w http.ResponseWriter, r *http.Request)
	// Get doctor by ID
	// (GET /doctors/{doctorId})
	GetDoctorById(w http.ResponseWriter, r *http.Request, doctorId DoctorId)
	// Get patient by ID
	// (GET /patients/{patientId})
	GetPatientById(w http.ResponseWriter, r *http.Request, patientId PatientId)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// User Login
// (POST /auth/login)
func (_ Unimplemented) LoginUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new user
// (POST /auth/register)
func (_ Unimplemented) RegisterUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get doctors
// (GET /doctors)
func (_ Unimplemented) GetDoctors(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get doctor by ID
// (GET /doctors/{doctorId})
func (_ Unimplemented) GetDoctorById(w http.ResponseWriter, r *http.Request, doctorId DoctorId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get patient by ID
// (GET /patients/{patientId})
func (_ Unimplemented) GetPatientById(w http.ResponseWriter, r *http.Request, patientId PatientId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDoctors operation middleware
func (siw *ServerInterfaceWrapper) GetDoctors(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDoctors(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDoctorById operation middleware
func (siw *ServerInterfaceWrapper) GetDoctorById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "doctorId" -------------
	var doctorId DoctorId

	err = runtime.BindStyledParameterWithOptions("simple", "doctorId", chi.URLParam(r, "doctorId"), &doctorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "doctorId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDoctorById(w, r, doctorId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPatientById operation middleware
func (siw *ServerInterfaceWrapper) GetPatientById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "patientId" -------------
	var patientId PatientId

	err = runtime.BindStyledParameterWithOptions("simple", "patientId", chi.URLParam(r, "patientId"), &patientId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "patientId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPatientById(w, r, patientId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.LoginUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/register", wrapper.RegisterUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/doctors", wrapper.GetDoctors)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/doctors/{doctorId}", wrapper.GetDoctorById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/patients/{patientId}", wrapper.GetPatientById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../common/server/api/common-openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
