// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/Nesquiko/aass/common/server/api"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ResourceType.
const (
	ResourceTypeEquipment ResourceType = "equipment"
	ResourceTypeFacility  ResourceType = "facility"
	ResourceTypeMedicine  ResourceType = "medicine"
)

// AvailableResources Lists of available resources (facilities, equipment, medicine) for a specific date and time slot.
type AvailableResources struct {
	// Equipment List of available equipment.
	Equipment []Equipment `json:"equipment"`

	// Facilities List of available facilities.
	Facilities []Facility `json:"facilities"`

	// Medicine List of available medicine (assuming medicine can be 'allocated' or has limited stock per slot).
	Medicine []Medicine `json:"medicine"`
}

// Equipment Represents a required equipment resource.
type Equipment struct {
	// Id Unique identifier for the equipment.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the equipment.
	Name string `json:"name"`
}

// Facility Represents a required facility resource.
type Facility struct {
	// Id Unique identifier for the facility.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the facility.
	Name string `json:"name"`
}

// Medicine Represents a required medicine resource.
type Medicine struct {
	// Id Unique identifier for the medicine.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the medicine.
	Name string `json:"name"`
}

// NewResource Represents a resource.
type NewResource struct {
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the medicine.
	Name string       `json:"name"`
	Type ResourceType `json:"type"`
}

// ResourceType defines model for ResourceType.
type ResourceType string

// AppointmentId defines model for appointmentId.
type AppointmentId = openapi_types.UUID

// DateTime defines model for date-time.
type DateTime = time.Time

// ResourceId defines model for resourceId.
type ResourceId = openapi_types.UUID

// GetAvailableResourcesParams defines parameters for GetAvailableResources.
type GetAvailableResourcesParams struct {
	DateTime DateTime `form:"date-time" json:"date-time"`
}

// ReserveAppointmentResourcesJSONBody defines parameters for ReserveAppointmentResources.
type ReserveAppointmentResourcesJSONBody struct {
	EquipmentId *openapi_types.UUID `json:"equipmentId,omitempty"`
	FacilityId  *openapi_types.UUID `json:"facilityId,omitempty"`
	MedicineId  *openapi_types.UUID `json:"medicineId,omitempty"`
	Start       time.Time           `json:"start"`
}

// CreateResourceJSONRequestBody defines body for CreateResource for application/json ContentType.
type CreateResourceJSONRequestBody = NewResource

// ReserveAppointmentResourcesJSONRequestBody defines body for ReserveAppointmentResources for application/json ContentType.
type ReserveAppointmentResourcesJSONRequestBody ReserveAppointmentResourcesJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create resource
	// (POST /resources)
	CreateResource(w http.ResponseWriter, r *http.Request)
	// Get available resources for a time slot
	// (GET /resources/available)
	GetAvailableResources(w http.ResponseWriter, r *http.Request, params GetAvailableResourcesParams)
	// Reserves resources for an appointment
	// (POST /resources/reserve/{appointmentId})
	ReserveAppointmentResources(w http.ResponseWriter, r *http.Request, appointmentId AppointmentId)
	// Get resource by ID
	// (GET /resources/{resourceId})
	GetResourceById(w http.ResponseWriter, r *http.Request, resourceId ResourceId)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Create resource
// (POST /resources)
func (_ Unimplemented) CreateResource(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get available resources for a time slot
// (GET /resources/available)
func (_ Unimplemented) GetAvailableResources(w http.ResponseWriter, r *http.Request, params GetAvailableResourcesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reserves resources for an appointment
// (POST /resources/reserve/{appointmentId})
func (_ Unimplemented) ReserveAppointmentResources(w http.ResponseWriter, r *http.Request, appointmentId AppointmentId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get resource by ID
// (GET /resources/{resourceId})
func (_ Unimplemented) GetResourceById(w http.ResponseWriter, r *http.Request, resourceId ResourceId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateResource operation middleware
func (siw *ServerInterfaceWrapper) CreateResource(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateResource(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAvailableResources operation middleware
func (siw *ServerInterfaceWrapper) GetAvailableResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAvailableResourcesParams

	// ------------- Required query parameter "date-time" -------------

	if paramValue := r.URL.Query().Get("date-time"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "date-time"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date-time", r.URL.Query(), &params.DateTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date-time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAvailableResources(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReserveAppointmentResources operation middleware
func (siw *ServerInterfaceWrapper) ReserveAppointmentResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "appointmentId" -------------
	var appointmentId AppointmentId

	err = runtime.BindStyledParameterWithOptions("simple", "appointmentId", chi.URLParam(r, "appointmentId"), &appointmentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "appointmentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReserveAppointmentResources(w, r, appointmentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourceById operation middleware
func (siw *ServerInterfaceWrapper) GetResourceById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "resourceId" -------------
	var resourceId ResourceId

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", chi.URLParam(r, "resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourceById(w, r, resourceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/resources", wrapper.CreateResource)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/resources/available", wrapper.GetAvailableResources)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/resources/reserve/{appointmentId}", wrapper.ReserveAppointmentResources)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/resources/{resourceId}", wrapper.GetResourceById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../common/server/api/common-openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
