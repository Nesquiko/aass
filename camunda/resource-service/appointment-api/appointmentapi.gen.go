// Package appointmentapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package appointmentapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	externalRef0 "github.com/Nesquiko/aass/common/server/api"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AppointmentDecisionAction.
const (
	Accept AppointmentDecisionAction = "accept"
	Reject AppointmentDecisionAction = "reject"
)

// Defines values for AppointmentStatus.
const (
	Cancelled AppointmentStatus = "cancelled"
	Completed AppointmentStatus = "completed"
	Denied    AppointmentStatus = "denied"
	Requested AppointmentStatus = "requested"
	Scheduled AppointmentStatus = "scheduled"
)

// Defines values for AppointmentType.
const (
	AnnualPhysical  AppointmentType = "annual_physical"
	Consultation    AppointmentType = "consultation"
	FollowUp        AppointmentType = "follow_up"
	NewPatient      AppointmentType = "new_patient"
	Procedure       AppointmentType = "procedure"
	RegularCheck    AppointmentType = "regular_check"
	SpecialistVisit AppointmentType = "specialist_visit"
	UrgentCare      AppointmentType = "urgent_care"
	Vaccination     AppointmentType = "vaccination"
)

// Defines values for SpecializationEnum.
const (
	Cardiologist        SpecializationEnum = "cardiologist"
	Dermatologist       SpecializationEnum = "dermatologist"
	Diagnostician       SpecializationEnum = "diagnostician"
	Endocrinologist     SpecializationEnum = "endocrinologist"
	Gastroenterologist  SpecializationEnum = "gastroenterologist"
	GeneralPractitioner SpecializationEnum = "general_practitioner"
	Neurologist         SpecializationEnum = "neurologist"
	Oncologist          SpecializationEnum = "oncologist"
	Orthopedist         SpecializationEnum = "orthopedist"
	Other               SpecializationEnum = "other"
	Pediatrician        SpecializationEnum = "pediatrician"
	Psychiatrist        SpecializationEnum = "psychiatrist"
	Radiologist         SpecializationEnum = "radiologist"
	Surgeon             SpecializationEnum = "surgeon"
	Urologist           SpecializationEnum = "urologist"
)

// Defines values for TimeSlotStatus.
const (
	Available   TimeSlotStatus = "available"
	Unavailable TimeSlotStatus = "unavailable"
)

// Defines values for UserRole.
const (
	UserRoleDoctor  UserRole = "doctor"
	UserRolePatient UserRole = "patient"
)

// Appointment Contains information about an appointment.
type Appointment struct {
	AppointmentDateTime time.Time `json:"appointmentDateTime"`
	CanceledBy          *UserRole `json:"canceledBy,omitempty"`
	CancellationReason  *string   `json:"cancellationReason,omitempty"`

	// Condition Basic info about a patient's condition.
	Condition    *ConditionDisplay `json:"condition,omitempty"`
	DenialReason *string           `json:"denialReason,omitempty"`
	Doctor       Doctor            `json:"doctor"`

	// Equipment List of required equipment for the appointment.
	Equipment *[]Equipment `json:"equipment,omitempty"`

	// Facilities List of required facilities for the appointment.
	Facilities *[]Facility        `json:"facilities,omitempty"`
	Id         openapi_types.UUID `json:"id"`

	// Medicine List of required medicine for the appointment.
	Medicine      *[]Medicine            `json:"medicine,omitempty"`
	Patient       Patient                `json:"patient"`
	Prescriptions *[]PrescriptionDisplay `json:"prescriptions,omitempty"`
	Reason        *string                `json:"reason,omitempty"`

	// Status The current status of the appointment.
	Status AppointmentStatus `json:"status"`

	// Type The type of the appointment.
	Type AppointmentType `json:"type"`
}

// AppointmentCancellation Data required to cancel an appointment.
type AppointmentCancellation struct {
	By UserRole `json:"by"`

	// Reason Optional reason provided for the cancellation.
	Reason *string `json:"reason,omitempty"`
}

// AppointmentDecision Data required for staff to accept or reject an appointment request.
type AppointmentDecision struct {
	// Action The decision action to take on the appointment request.
	Action    AppointmentDecisionAction `json:"action"`
	Equipment *openapi_types.UUID       `json:"equipment,omitempty"`
	Facility  *openapi_types.UUID       `json:"facility,omitempty"`
	Medicine  *openapi_types.UUID       `json:"medicine,omitempty"`

	// Reason Required reason if the action is 'reject'. Optional otherwise.
	Reason *string `json:"reason,omitempty"`
}

// AppointmentDecisionAction The decision action to take on the appointment request.
type AppointmentDecisionAction string

// AppointmentDisplay Represents an appointment view.
type AppointmentDisplay struct {
	// AppointmentDateTime The date time of the appointment.
	AppointmentDateTime time.Time `json:"appointmentDateTime"`
	DoctorName          string    `json:"doctorName"`

	// Id Unique identifier for the appointment.
	Id          openapi_types.UUID `json:"id"`
	PatientName string             `json:"patientName"`

	// Status The current status of the appointment.
	Status AppointmentStatus `json:"status"`

	// Type The type of the appointment.
	Type AppointmentType `json:"type"`
}

// AppointmentReschedule Data required for a patient to reschedule their appointment.
type AppointmentReschedule struct {
	NewAppointmentDateTime time.Time `json:"newAppointmentDateTime"`

	// Reason Optional reason for rescheduling provided by the patient.
	Reason *string `json:"reason,omitempty"`
}

// AppointmentResourceUpdate Specifies resources to add or update for an appointment. Fields are optional; include only those to change. Use null to remove an existing resource association.
type AppointmentResourceUpdate struct {
	// EquipmentId The equipment ID to associate, or null to remove association.
	EquipmentId *openapi_types.UUID `json:"equipmentId"`

	// FacilityId The facility ID to associate, or null to remove association.
	FacilityId *openapi_types.UUID `json:"facilityId"`

	// MedicineId The medicine ID to associate, or null to remove association.
	MedicineId *openapi_types.UUID `json:"medicineId"`
}

// AppointmentStatus The current status of the appointment.
type AppointmentStatus string

// AppointmentType The type of the appointment.
type AppointmentType string

// Appointments defines model for Appointments.
type Appointments struct {
	Appointments *[]AppointmentDisplay `json:"appointments,omitempty"`
}

// ConditionDisplay Basic info about a patient's condition.
type ConditionDisplay struct {
	AppointmentsIds *[]openapi_types.UUID `json:"appointmentsIds,omitempty"`
	End             *time.Time            `json:"end,omitempty"`
	Id              *openapi_types.UUID   `json:"id,omitempty"`
	Name            string                `json:"name"`
	Start           time.Time             `json:"start"`
}

// Doctor defines model for Doctor.
type Doctor struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        openapi_types.UUID  `json:"id"`
	LastName  string              `json:"lastName"`
	Role      UserRole            `json:"role"`

	// Specialization Medical specialization of a doctor.
	Specialization SpecializationEnum `json:"specialization"`
}

// Equipment Represents a required equipment resource.
type Equipment struct {
	// Id Unique identifier for the equipment.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the equipment.
	Name string `json:"name"`
}

// Facility Represents a required facility resource.
type Facility struct {
	// Id Unique identifier for the facility.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the facility.
	Name string `json:"name"`
}

// Medicine Represents a required medicine resource.
type Medicine struct {
	// Id Unique identifier for the medicine.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the medicine.
	Name string `json:"name"`
}

// NewAppointmentRequest defines model for NewAppointmentRequest.
type NewAppointmentRequest struct {
	AppointmentDateTime time.Time           `json:"appointmentDateTime"`
	ConditionId         *openapi_types.UUID `json:"conditionId,omitempty"`
	DoctorId            openapi_types.UUID  `json:"doctorId"`
	PatientId           openapi_types.UUID  `json:"patientId"`

	// Reason Reason for the appointment provided by the patient.
	Reason *string `json:"reason,omitempty"`

	// Type The type of the appointment.
	Type *AppointmentType `json:"type,omitempty"`
}

// Patient defines model for Patient.
type Patient struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        openapi_types.UUID  `json:"id"`
	LastName  string              `json:"lastName"`
	Role      UserRole            `json:"role"`
}

// PrescriptionDisplay Basic info about a patient's condition.
type PrescriptionDisplay struct {
	AppointmentId *openapi_types.UUID `json:"appointmentId,omitempty"`
	End           time.Time           `json:"end"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	Name          string              `json:"name"`
	Start         time.Time           `json:"start"`
}

// SpecializationEnum Medical specialization of a doctor.
type SpecializationEnum string

// TimeSlot Represents a single time slot for a doctor on a specific day.
type TimeSlot struct {
	// Status Indicates whether the time slot is available or not.
	Status TimeSlotStatus `json:"status"`

	// Time The time of the slot (HH:MM format, 24-hour clock).
	Time string `json:"time"`
}

// TimeSlotStatus Indicates whether the time slot is available or not.
type TimeSlotStatus string

// UserRole defines model for UserRole.
type UserRole string

// AppointmentId defines model for appointmentId.
type AppointmentId = openapi_types.UUID

// ConditionId defines model for conditionId.
type ConditionId = openapi_types.UUID

// Date defines model for date.
type Date = openapi_types.Date

// DoctorId defines model for doctorId.
type DoctorId = openapi_types.UUID

// From defines model for from.
type From = openapi_types.Date

// PatientId defines model for patientId.
type PatientId = openapi_types.UUID

// To defines model for to.
type To = openapi_types.Date

// DoctorTimeslots defines model for DoctorTimeslots.
type DoctorTimeslots struct {
	Slots []TimeSlot `json:"slots"`
}

// DoctorsCalendarParams defines parameters for DoctorsCalendar.
type DoctorsCalendarParams struct {
	// From The specific day form which to retrieve resources.
	From From `form:"from" json:"from"`

	// To The specific day to which to retrieve resources.
	To *To `form:"to,omitempty" json:"to,omitempty"`
}

// PatientsCalendarParams defines parameters for PatientsCalendar.
type PatientsCalendarParams struct {
	// From The specific day form which to retrieve resources.
	From From `form:"from" json:"from"`

	// To The specific day to which to retrieve resources.
	To *To `form:"to,omitempty" json:"to,omitempty"`
}

// DoctorsTimeslotsParams defines parameters for DoctorsTimeslots.
type DoctorsTimeslotsParams struct {
	// Date The specific day for which to retrieve timeslots (YYYY-MM-DD format).
	Date Date `form:"date" json:"date"`
}

// RequestAppointmentJSONRequestBody defines body for RequestAppointment for application/json ContentType.
type RequestAppointmentJSONRequestBody = NewAppointmentRequest

// CancelAppointmentJSONRequestBody defines body for CancelAppointment for application/json ContentType.
type CancelAppointmentJSONRequestBody = AppointmentCancellation

// RescheduleAppointmentJSONRequestBody defines body for RescheduleAppointment for application/json ContentType.
type RescheduleAppointmentJSONRequestBody = AppointmentReschedule

// DecideAppointmentJSONRequestBody defines body for DecideAppointment for application/json ContentType.
type DecideAppointmentJSONRequestBody = AppointmentDecision

// UpdateAppointmentResourcesJSONRequestBody defines body for UpdateAppointmentResources for application/json ContentType.
type UpdateAppointmentResourcesJSONRequestBody = AppointmentResourceUpdate

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RequestAppointmentWithBody request with any body
	RequestAppointmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RequestAppointment(ctx context.Context, body RequestAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppointmentsByConditionId request
	AppointmentsByConditionId(ctx context.Context, conditionId ConditionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DoctorsCalendar request
	DoctorsCalendar(ctx context.Context, doctorId DoctorId, params *DoctorsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatientsCalendar request
	PatientsCalendar(ctx context.Context, patientId PatientId, params *PatientsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelAppointmentWithBody request with any body
	CancelAppointmentWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelAppointment(ctx context.Context, appointmentId AppointmentId, body CancelAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppointmentById request
	AppointmentById(ctx context.Context, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RescheduleAppointmentWithBody request with any body
	RescheduleAppointmentWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RescheduleAppointment(ctx context.Context, appointmentId AppointmentId, body RescheduleAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DecideAppointmentWithBody request with any body
	DecideAppointmentWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DecideAppointment(ctx context.Context, appointmentId AppointmentId, body DecideAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAppointmentResourcesWithBody request with any body
	UpdateAppointmentResourcesWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAppointmentResources(ctx context.Context, appointmentId AppointmentId, body UpdateAppointmentResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DoctorsTimeslots request
	DoctorsTimeslots(ctx context.Context, doctorId DoctorId, params *DoctorsTimeslotsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RequestAppointmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestAppointmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestAppointment(ctx context.Context, body RequestAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestAppointmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppointmentsByConditionId(ctx context.Context, conditionId ConditionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppointmentsByConditionIdRequest(c.Server, conditionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DoctorsCalendar(ctx context.Context, doctorId DoctorId, params *DoctorsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDoctorsCalendarRequest(c.Server, doctorId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatientsCalendar(ctx context.Context, patientId PatientId, params *PatientsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatientsCalendarRequest(c.Server, patientId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelAppointmentWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelAppointmentRequestWithBody(c.Server, appointmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelAppointment(ctx context.Context, appointmentId AppointmentId, body CancelAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelAppointmentRequest(c.Server, appointmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppointmentById(ctx context.Context, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppointmentByIdRequest(c.Server, appointmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RescheduleAppointmentWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRescheduleAppointmentRequestWithBody(c.Server, appointmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RescheduleAppointment(ctx context.Context, appointmentId AppointmentId, body RescheduleAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRescheduleAppointmentRequest(c.Server, appointmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DecideAppointmentWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDecideAppointmentRequestWithBody(c.Server, appointmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DecideAppointment(ctx context.Context, appointmentId AppointmentId, body DecideAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDecideAppointmentRequest(c.Server, appointmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAppointmentResourcesWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAppointmentResourcesRequestWithBody(c.Server, appointmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAppointmentResources(ctx context.Context, appointmentId AppointmentId, body UpdateAppointmentResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAppointmentResourcesRequest(c.Server, appointmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DoctorsTimeslots(ctx context.Context, doctorId DoctorId, params *DoctorsTimeslotsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDoctorsTimeslotsRequest(c.Server, doctorId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRequestAppointmentRequest calls the generic RequestAppointment builder with application/json body
func NewRequestAppointmentRequest(server string, body RequestAppointmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRequestAppointmentRequestWithBody(server, "application/json", bodyReader)
}

// NewRequestAppointmentRequestWithBody generates requests for RequestAppointment with any type of body
func NewRequestAppointmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppointmentsByConditionIdRequest generates requests for AppointmentsByConditionId
func NewAppointmentsByConditionIdRequest(server string, conditionId ConditionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conditionId", runtime.ParamLocationPath, conditionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointments/condition/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDoctorsCalendarRequest generates requests for DoctorsCalendar
func NewDoctorsCalendarRequest(server string, doctorId DoctorId, params *DoctorsCalendarParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, doctorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointments/doctor/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatientsCalendarRequest generates requests for PatientsCalendar
func NewPatientsCalendarRequest(server string, patientId PatientId, params *PatientsCalendarParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patientId", runtime.ParamLocationPath, patientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointments/patient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelAppointmentRequest calls the generic CancelAppointment builder with application/json body
func NewCancelAppointmentRequest(server string, appointmentId AppointmentId, body CancelAppointmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelAppointmentRequestWithBody(server, appointmentId, "application/json", bodyReader)
}

// NewCancelAppointmentRequestWithBody generates requests for CancelAppointment with any type of body
func NewCancelAppointmentRequestWithBody(server string, appointmentId AppointmentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appointmentId", runtime.ParamLocationPath, appointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppointmentByIdRequest generates requests for AppointmentById
func NewAppointmentByIdRequest(server string, appointmentId AppointmentId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appointmentId", runtime.ParamLocationPath, appointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRescheduleAppointmentRequest calls the generic RescheduleAppointment builder with application/json body
func NewRescheduleAppointmentRequest(server string, appointmentId AppointmentId, body RescheduleAppointmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRescheduleAppointmentRequestWithBody(server, appointmentId, "application/json", bodyReader)
}

// NewRescheduleAppointmentRequestWithBody generates requests for RescheduleAppointment with any type of body
func NewRescheduleAppointmentRequestWithBody(server string, appointmentId AppointmentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appointmentId", runtime.ParamLocationPath, appointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDecideAppointmentRequest calls the generic DecideAppointment builder with application/json body
func NewDecideAppointmentRequest(server string, appointmentId AppointmentId, body DecideAppointmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDecideAppointmentRequestWithBody(server, appointmentId, "application/json", bodyReader)
}

// NewDecideAppointmentRequestWithBody generates requests for DecideAppointment with any type of body
func NewDecideAppointmentRequestWithBody(server string, appointmentId AppointmentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appointmentId", runtime.ParamLocationPath, appointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAppointmentResourcesRequest calls the generic UpdateAppointmentResources builder with application/json body
func NewUpdateAppointmentResourcesRequest(server string, appointmentId AppointmentId, body UpdateAppointmentResourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAppointmentResourcesRequestWithBody(server, appointmentId, "application/json", bodyReader)
}

// NewUpdateAppointmentResourcesRequestWithBody generates requests for UpdateAppointmentResources with any type of body
func NewUpdateAppointmentResourcesRequestWithBody(server string, appointmentId AppointmentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appointmentId", runtime.ParamLocationPath, appointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointments/%s/resources", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDoctorsTimeslotsRequest generates requests for DoctorsTimeslots
func NewDoctorsTimeslotsRequest(server string, doctorId DoctorId, params *DoctorsTimeslotsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, doctorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeslots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RequestAppointmentWithBodyWithResponse request with any body
	RequestAppointmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestAppointmentResponse, error)

	RequestAppointmentWithResponse(ctx context.Context, body RequestAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestAppointmentResponse, error)

	// AppointmentsByConditionIdWithResponse request
	AppointmentsByConditionIdWithResponse(ctx context.Context, conditionId ConditionId, reqEditors ...RequestEditorFn) (*AppointmentsByConditionIdResponse, error)

	// DoctorsCalendarWithResponse request
	DoctorsCalendarWithResponse(ctx context.Context, doctorId DoctorId, params *DoctorsCalendarParams, reqEditors ...RequestEditorFn) (*DoctorsCalendarResponse, error)

	// PatientsCalendarWithResponse request
	PatientsCalendarWithResponse(ctx context.Context, patientId PatientId, params *PatientsCalendarParams, reqEditors ...RequestEditorFn) (*PatientsCalendarResponse, error)

	// CancelAppointmentWithBodyWithResponse request with any body
	CancelAppointmentWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelAppointmentResponse, error)

	CancelAppointmentWithResponse(ctx context.Context, appointmentId AppointmentId, body CancelAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelAppointmentResponse, error)

	// AppointmentByIdWithResponse request
	AppointmentByIdWithResponse(ctx context.Context, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*AppointmentByIdResponse, error)

	// RescheduleAppointmentWithBodyWithResponse request with any body
	RescheduleAppointmentWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RescheduleAppointmentResponse, error)

	RescheduleAppointmentWithResponse(ctx context.Context, appointmentId AppointmentId, body RescheduleAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*RescheduleAppointmentResponse, error)

	// DecideAppointmentWithBodyWithResponse request with any body
	DecideAppointmentWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DecideAppointmentResponse, error)

	DecideAppointmentWithResponse(ctx context.Context, appointmentId AppointmentId, body DecideAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*DecideAppointmentResponse, error)

	// UpdateAppointmentResourcesWithBodyWithResponse request with any body
	UpdateAppointmentResourcesWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAppointmentResourcesResponse, error)

	UpdateAppointmentResourcesWithResponse(ctx context.Context, appointmentId AppointmentId, body UpdateAppointmentResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAppointmentResourcesResponse, error)

	// DoctorsTimeslotsWithResponse request
	DoctorsTimeslotsWithResponse(ctx context.Context, doctorId DoctorId, params *DoctorsTimeslotsParams, reqEditors ...RequestEditorFn) (*DoctorsTimeslotsResponse, error)
}

type RequestAppointmentResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *Appointment
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r RequestAppointmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestAppointmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppointmentsByConditionIdResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Appointments
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppointmentsByConditionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppointmentsByConditionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DoctorsCalendarResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Appointments
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DoctorsCalendarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DoctorsCalendarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatientsCalendarResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Appointments
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatientsCalendarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatientsCalendarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelAppointmentResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r CancelAppointmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelAppointmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppointmentByIdResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Appointment
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppointmentByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppointmentByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RescheduleAppointmentResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Appointment
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r RescheduleAppointmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RescheduleAppointmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DecideAppointmentResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Appointment
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DecideAppointmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DecideAppointmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAppointmentResourcesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Appointment
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateAppointmentResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAppointmentResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DoctorsTimeslotsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *DoctorTimeslots
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DoctorsTimeslotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DoctorsTimeslotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RequestAppointmentWithBodyWithResponse request with arbitrary body returning *RequestAppointmentResponse
func (c *ClientWithResponses) RequestAppointmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestAppointmentResponse, error) {
	rsp, err := c.RequestAppointmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestAppointmentResponse(rsp)
}

func (c *ClientWithResponses) RequestAppointmentWithResponse(ctx context.Context, body RequestAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestAppointmentResponse, error) {
	rsp, err := c.RequestAppointment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestAppointmentResponse(rsp)
}

// AppointmentsByConditionIdWithResponse request returning *AppointmentsByConditionIdResponse
func (c *ClientWithResponses) AppointmentsByConditionIdWithResponse(ctx context.Context, conditionId ConditionId, reqEditors ...RequestEditorFn) (*AppointmentsByConditionIdResponse, error) {
	rsp, err := c.AppointmentsByConditionId(ctx, conditionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppointmentsByConditionIdResponse(rsp)
}

// DoctorsCalendarWithResponse request returning *DoctorsCalendarResponse
func (c *ClientWithResponses) DoctorsCalendarWithResponse(ctx context.Context, doctorId DoctorId, params *DoctorsCalendarParams, reqEditors ...RequestEditorFn) (*DoctorsCalendarResponse, error) {
	rsp, err := c.DoctorsCalendar(ctx, doctorId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDoctorsCalendarResponse(rsp)
}

// PatientsCalendarWithResponse request returning *PatientsCalendarResponse
func (c *ClientWithResponses) PatientsCalendarWithResponse(ctx context.Context, patientId PatientId, params *PatientsCalendarParams, reqEditors ...RequestEditorFn) (*PatientsCalendarResponse, error) {
	rsp, err := c.PatientsCalendar(ctx, patientId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatientsCalendarResponse(rsp)
}

// CancelAppointmentWithBodyWithResponse request with arbitrary body returning *CancelAppointmentResponse
func (c *ClientWithResponses) CancelAppointmentWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelAppointmentResponse, error) {
	rsp, err := c.CancelAppointmentWithBody(ctx, appointmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelAppointmentResponse(rsp)
}

func (c *ClientWithResponses) CancelAppointmentWithResponse(ctx context.Context, appointmentId AppointmentId, body CancelAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelAppointmentResponse, error) {
	rsp, err := c.CancelAppointment(ctx, appointmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelAppointmentResponse(rsp)
}

// AppointmentByIdWithResponse request returning *AppointmentByIdResponse
func (c *ClientWithResponses) AppointmentByIdWithResponse(ctx context.Context, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*AppointmentByIdResponse, error) {
	rsp, err := c.AppointmentById(ctx, appointmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppointmentByIdResponse(rsp)
}

// RescheduleAppointmentWithBodyWithResponse request with arbitrary body returning *RescheduleAppointmentResponse
func (c *ClientWithResponses) RescheduleAppointmentWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RescheduleAppointmentResponse, error) {
	rsp, err := c.RescheduleAppointmentWithBody(ctx, appointmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRescheduleAppointmentResponse(rsp)
}

func (c *ClientWithResponses) RescheduleAppointmentWithResponse(ctx context.Context, appointmentId AppointmentId, body RescheduleAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*RescheduleAppointmentResponse, error) {
	rsp, err := c.RescheduleAppointment(ctx, appointmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRescheduleAppointmentResponse(rsp)
}

// DecideAppointmentWithBodyWithResponse request with arbitrary body returning *DecideAppointmentResponse
func (c *ClientWithResponses) DecideAppointmentWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DecideAppointmentResponse, error) {
	rsp, err := c.DecideAppointmentWithBody(ctx, appointmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDecideAppointmentResponse(rsp)
}

func (c *ClientWithResponses) DecideAppointmentWithResponse(ctx context.Context, appointmentId AppointmentId, body DecideAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*DecideAppointmentResponse, error) {
	rsp, err := c.DecideAppointment(ctx, appointmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDecideAppointmentResponse(rsp)
}

// UpdateAppointmentResourcesWithBodyWithResponse request with arbitrary body returning *UpdateAppointmentResourcesResponse
func (c *ClientWithResponses) UpdateAppointmentResourcesWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAppointmentResourcesResponse, error) {
	rsp, err := c.UpdateAppointmentResourcesWithBody(ctx, appointmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAppointmentResourcesResponse(rsp)
}

func (c *ClientWithResponses) UpdateAppointmentResourcesWithResponse(ctx context.Context, appointmentId AppointmentId, body UpdateAppointmentResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAppointmentResourcesResponse, error) {
	rsp, err := c.UpdateAppointmentResources(ctx, appointmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAppointmentResourcesResponse(rsp)
}

// DoctorsTimeslotsWithResponse request returning *DoctorsTimeslotsResponse
func (c *ClientWithResponses) DoctorsTimeslotsWithResponse(ctx context.Context, doctorId DoctorId, params *DoctorsTimeslotsParams, reqEditors ...RequestEditorFn) (*DoctorsTimeslotsResponse, error) {
	rsp, err := c.DoctorsTimeslots(ctx, doctorId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDoctorsTimeslotsResponse(rsp)
}

// ParseRequestAppointmentResponse parses an HTTP response from a RequestAppointmentWithResponse call
func ParseRequestAppointmentResponse(rsp *http.Response) (*RequestAppointmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RequestAppointmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Appointment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseAppointmentsByConditionIdResponse parses an HTTP response from a AppointmentsByConditionIdWithResponse call
func ParseAppointmentsByConditionIdResponse(rsp *http.Response) (*AppointmentsByConditionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppointmentsByConditionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Appointments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDoctorsCalendarResponse parses an HTTP response from a DoctorsCalendarWithResponse call
func ParseDoctorsCalendarResponse(rsp *http.Response) (*DoctorsCalendarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DoctorsCalendarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Appointments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePatientsCalendarResponse parses an HTTP response from a PatientsCalendarWithResponse call
func ParsePatientsCalendarResponse(rsp *http.Response) (*PatientsCalendarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatientsCalendarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Appointments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCancelAppointmentResponse parses an HTTP response from a CancelAppointmentWithResponse call
func ParseCancelAppointmentResponse(rsp *http.Response) (*CancelAppointmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelAppointmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseAppointmentByIdResponse parses an HTTP response from a AppointmentByIdWithResponse call
func ParseAppointmentByIdResponse(rsp *http.Response) (*AppointmentByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppointmentByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Appointment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseRescheduleAppointmentResponse parses an HTTP response from a RescheduleAppointmentWithResponse call
func ParseRescheduleAppointmentResponse(rsp *http.Response) (*RescheduleAppointmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RescheduleAppointmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Appointment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDecideAppointmentResponse parses an HTTP response from a DecideAppointmentWithResponse call
func ParseDecideAppointmentResponse(rsp *http.Response) (*DecideAppointmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DecideAppointmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Appointment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateAppointmentResourcesResponse parses an HTTP response from a UpdateAppointmentResourcesWithResponse call
func ParseUpdateAppointmentResourcesResponse(rsp *http.Response) (*UpdateAppointmentResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAppointmentResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Appointment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDoctorsTimeslotsResponse parses an HTTP response from a DoctorsTimeslotsWithResponse call
func ParseDoctorsTimeslotsResponse(rsp *http.Response) (*DoctorsTimeslotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DoctorsTimeslotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DoctorTimeslots
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}
