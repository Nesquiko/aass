// Package medicalapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package medicalapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	externalRef0 "github.com/Nesquiko/aass/common/server/api"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AppointmentStatus.
const (
	Cancelled AppointmentStatus = "cancelled"
	Completed AppointmentStatus = "completed"
	Denied    AppointmentStatus = "denied"
	Requested AppointmentStatus = "requested"
	Scheduled AppointmentStatus = "scheduled"
)

// Defines values for AppointmentType.
const (
	AnnualPhysical  AppointmentType = "annual_physical"
	Consultation    AppointmentType = "consultation"
	FollowUp        AppointmentType = "follow_up"
	NewPatient      AppointmentType = "new_patient"
	Procedure       AppointmentType = "procedure"
	RegularCheck    AppointmentType = "regular_check"
	SpecialistVisit AppointmentType = "specialist_visit"
	UrgentCare      AppointmentType = "urgent_care"
	Vaccination     AppointmentType = "vaccination"
)

// AppointmentDisplay Represents an appointment view.
type AppointmentDisplay struct {
	// AppointmentDateTime The date time of the appointment.
	AppointmentDateTime time.Time `json:"appointmentDateTime"`
	DoctorName          string    `json:"doctorName"`

	// Id Unique identifier for the appointment.
	Id          openapi_types.UUID `json:"id"`
	PatientName string             `json:"patientName"`

	// Status The current status of the appointment.
	Status AppointmentStatus `json:"status"`

	// Type The type of the appointment.
	Type AppointmentType `json:"type"`
}

// AppointmentStatus The current status of the appointment.
type AppointmentStatus string

// AppointmentType The type of the appointment.
type AppointmentType string

// Condition defines model for Condition.
type Condition struct {
	Appointments    []AppointmentDisplay  `json:"appointments"`
	AppointmentsIds *[]openapi_types.UUID `json:"appointmentsIds,omitempty"`
	End             *time.Time            `json:"end,omitempty"`
	Id              *openapi_types.UUID   `json:"id,omitempty"`
	Name            string                `json:"name"`
	Start           time.Time             `json:"start"`
}

// ConditionDisplay Basic info about a patient's condition.
type ConditionDisplay struct {
	AppointmentsIds *[]openapi_types.UUID `json:"appointmentsIds,omitempty"`
	End             *time.Time            `json:"end,omitempty"`
	Id              *openapi_types.UUID   `json:"id,omitempty"`
	Name            string                `json:"name"`
	Start           time.Time             `json:"start"`
}

// NewCondition defines model for NewCondition.
type NewCondition struct {
	AppointmentsIds *[]openapi_types.UUID `json:"appointmentsIds,omitempty"`
	End             *time.Time            `json:"end,omitempty"`
	Id              *openapi_types.UUID   `json:"id,omitempty"`
	Name            string                `json:"name"`
	PatientId       openapi_types.UUID    `json:"patientId"`
	Start           time.Time             `json:"start"`
}

// NewPrescription defines model for NewPrescription.
type NewPrescription struct {
	AppointmentId *openapi_types.UUID `json:"appointmentId,omitempty"`
	DoctorsNote   *string             `json:"doctorsNote,omitempty"`
	End           time.Time           `json:"end"`
	Name          string              `json:"name"`
	PatientId     openapi_types.UUID  `json:"patientId"`
	Start         time.Time           `json:"start"`
}

// Prescription defines model for Prescription.
type Prescription struct {
	// Appointment Represents an appointment view.
	Appointment   *AppointmentDisplay `json:"appointment,omitempty"`
	AppointmentId *openapi_types.UUID `json:"appointmentId,omitempty"`
	DoctorsNote   *string             `json:"doctorsNote,omitempty"`
	End           time.Time           `json:"end"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	Name          string              `json:"name"`
	Start         time.Time           `json:"start"`
}

// PrescriptionDisplay Basic info about a patient's condition.
type PrescriptionDisplay struct {
	AppointmentId *openapi_types.UUID `json:"appointmentId,omitempty"`
	End           time.Time           `json:"end"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	Name          string              `json:"name"`
	Start         time.Time           `json:"start"`
}

// UpdateCondition defines model for UpdateCondition.
type UpdateCondition struct {
	End       *time.Time          `json:"end"`
	Name      *string             `json:"name,omitempty"`
	PatientId *openapi_types.UUID `json:"patientId,omitempty"`
	Start     *time.Time          `json:"start,omitempty"`
}

// UpdatePrescription defines model for UpdatePrescription.
type UpdatePrescription struct {
	AppointmentId *openapi_types.UUID `json:"appointmentId,omitempty"`
	DoctorsNote   *string             `json:"doctorsNote,omitempty"`
	End           *time.Time          `json:"end,omitempty"`
	Name          *string             `json:"name,omitempty"`
	PatientId     *openapi_types.UUID `json:"patientId,omitempty"`
	Start         *time.Time          `json:"start,omitempty"`
}

// AppointmentId defines model for appointmentId.
type AppointmentId = openapi_types.UUID

// ConditionId defines model for conditionId.
type ConditionId = openapi_types.UUID

// From defines model for from.
type From = openapi_types.Date

// PatientId defines model for patientId.
type PatientId = openapi_types.UUID

// PrescriptionId defines model for prescriptionId.
type PrescriptionId = openapi_types.UUID

// To defines model for to.
type To = openapi_types.Date

// Conditions defines model for Conditions.
type Conditions struct {
	Conditions []ConditionDisplay `json:"conditions"`
}

// Prescriptions defines model for Prescriptions.
type Prescriptions struct {
	Prescriptions []PrescriptionDisplay `json:"prescriptions"`
}

// ConditionsInDateRangeParams defines parameters for ConditionsInDateRange.
type ConditionsInDateRangeParams struct {
	// From The specific day form which to retrieve resources.
	From From `form:"from" json:"from"`

	// To The specific day to which to retrieve resources.
	To *To `form:"to,omitempty" json:"to,omitempty"`
}

// PrescriptionsInDateRangeParams defines parameters for PrescriptionsInDateRange.
type PrescriptionsInDateRangeParams struct {
	// From The specific day form which to retrieve resources.
	From From `form:"from" json:"from"`

	// To The specific day to which to retrieve resources.
	To *To `form:"to,omitempty" json:"to,omitempty"`
}

// CreatePatientConditionJSONRequestBody defines body for CreatePatientCondition for application/json ContentType.
type CreatePatientConditionJSONRequestBody = NewCondition

// UpdateConditionJSONRequestBody defines body for UpdateCondition for application/json ContentType.
type UpdateConditionJSONRequestBody = UpdateCondition

// CreatePrescriptionJSONRequestBody defines body for CreatePrescription for application/json ContentType.
type CreatePrescriptionJSONRequestBody = NewPrescription

// UpdatePrescriptionJSONRequestBody defines body for UpdatePrescription for application/json ContentType.
type UpdatePrescriptionJSONRequestBody = UpdatePrescription

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreatePatientConditionWithBody request with any body
	CreatePatientConditionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePatientCondition(ctx context.Context, body CreatePatientConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConditionsInDateRange request
	ConditionsInDateRange(ctx context.Context, patientId PatientId, params *ConditionsInDateRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConditionDetail request
	ConditionDetail(ctx context.Context, conditionId ConditionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConditionWithBody request with any body
	UpdateConditionWithBody(ctx context.Context, conditionId ConditionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCondition(ctx context.Context, conditionId ConditionId, body UpdateConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePrescriptionWithBody request with any body
	CreatePrescriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePrescription(ctx context.Context, body CreatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPrescriptionsByAppointmentId request
	GetPrescriptionsByAppointmentId(ctx context.Context, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PrescriptionsInDateRange request
	PrescriptionsInDateRange(ctx context.Context, patientId PatientId, params *PrescriptionsInDateRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePrescription request
	DeletePrescription(ctx context.Context, prescriptionId PrescriptionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PrescriptionDetail request
	PrescriptionDetail(ctx context.Context, prescriptionId PrescriptionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePrescriptionWithBody request with any body
	UpdatePrescriptionWithBody(ctx context.Context, prescriptionId PrescriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePrescription(ctx context.Context, prescriptionId PrescriptionId, body UpdatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreatePatientConditionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePatientConditionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePatientCondition(ctx context.Context, body CreatePatientConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePatientConditionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConditionsInDateRange(ctx context.Context, patientId PatientId, params *ConditionsInDateRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConditionsInDateRangeRequest(c.Server, patientId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConditionDetail(ctx context.Context, conditionId ConditionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConditionDetailRequest(c.Server, conditionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConditionWithBody(ctx context.Context, conditionId ConditionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConditionRequestWithBody(c.Server, conditionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCondition(ctx context.Context, conditionId ConditionId, body UpdateConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConditionRequest(c.Server, conditionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePrescriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePrescriptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePrescription(ctx context.Context, body CreatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePrescriptionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPrescriptionsByAppointmentId(ctx context.Context, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPrescriptionsByAppointmentIdRequest(c.Server, appointmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PrescriptionsInDateRange(ctx context.Context, patientId PatientId, params *PrescriptionsInDateRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPrescriptionsInDateRangeRequest(c.Server, patientId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePrescription(ctx context.Context, prescriptionId PrescriptionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePrescriptionRequest(c.Server, prescriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PrescriptionDetail(ctx context.Context, prescriptionId PrescriptionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPrescriptionDetailRequest(c.Server, prescriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePrescriptionWithBody(ctx context.Context, prescriptionId PrescriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePrescriptionRequestWithBody(c.Server, prescriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePrescription(ctx context.Context, prescriptionId PrescriptionId, body UpdatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePrescriptionRequest(c.Server, prescriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreatePatientConditionRequest calls the generic CreatePatientCondition builder with application/json body
func NewCreatePatientConditionRequest(server string, body CreatePatientConditionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePatientConditionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePatientConditionRequestWithBody generates requests for CreatePatientCondition with any type of body
func NewCreatePatientConditionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conditions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConditionsInDateRangeRequest generates requests for ConditionsInDateRange
func NewConditionsInDateRangeRequest(server string, patientId PatientId, params *ConditionsInDateRangeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patientId", runtime.ParamLocationPath, patientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conditions/patient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConditionDetailRequest generates requests for ConditionDetail
func NewConditionDetailRequest(server string, conditionId ConditionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conditionId", runtime.ParamLocationPath, conditionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conditions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateConditionRequest calls the generic UpdateCondition builder with application/json body
func NewUpdateConditionRequest(server string, conditionId ConditionId, body UpdateConditionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConditionRequestWithBody(server, conditionId, "application/json", bodyReader)
}

// NewUpdateConditionRequestWithBody generates requests for UpdateCondition with any type of body
func NewUpdateConditionRequestWithBody(server string, conditionId ConditionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conditionId", runtime.ParamLocationPath, conditionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conditions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreatePrescriptionRequest calls the generic CreatePrescription builder with application/json body
func NewCreatePrescriptionRequest(server string, body CreatePrescriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePrescriptionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePrescriptionRequestWithBody generates requests for CreatePrescription with any type of body
func NewCreatePrescriptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prescriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPrescriptionsByAppointmentIdRequest generates requests for GetPrescriptionsByAppointmentId
func NewGetPrescriptionsByAppointmentIdRequest(server string, appointmentId AppointmentId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appointmentId", runtime.ParamLocationPath, appointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prescriptions/appointment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPrescriptionsInDateRangeRequest generates requests for PrescriptionsInDateRange
func NewPrescriptionsInDateRangeRequest(server string, patientId PatientId, params *PrescriptionsInDateRangeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patientId", runtime.ParamLocationPath, patientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prescriptions/patient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePrescriptionRequest generates requests for DeletePrescription
func NewDeletePrescriptionRequest(server string, prescriptionId PrescriptionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prescriptionId", runtime.ParamLocationPath, prescriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prescriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPrescriptionDetailRequest generates requests for PrescriptionDetail
func NewPrescriptionDetailRequest(server string, prescriptionId PrescriptionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prescriptionId", runtime.ParamLocationPath, prescriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prescriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePrescriptionRequest calls the generic UpdatePrescription builder with application/json body
func NewUpdatePrescriptionRequest(server string, prescriptionId PrescriptionId, body UpdatePrescriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePrescriptionRequestWithBody(server, prescriptionId, "application/json", bodyReader)
}

// NewUpdatePrescriptionRequestWithBody generates requests for UpdatePrescription with any type of body
func NewUpdatePrescriptionRequestWithBody(server string, prescriptionId PrescriptionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prescriptionId", runtime.ParamLocationPath, prescriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prescriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreatePatientConditionWithBodyWithResponse request with any body
	CreatePatientConditionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePatientConditionResponse, error)

	CreatePatientConditionWithResponse(ctx context.Context, body CreatePatientConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePatientConditionResponse, error)

	// ConditionsInDateRangeWithResponse request
	ConditionsInDateRangeWithResponse(ctx context.Context, patientId PatientId, params *ConditionsInDateRangeParams, reqEditors ...RequestEditorFn) (*ConditionsInDateRangeResponse, error)

	// ConditionDetailWithResponse request
	ConditionDetailWithResponse(ctx context.Context, conditionId ConditionId, reqEditors ...RequestEditorFn) (*ConditionDetailResponse, error)

	// UpdateConditionWithBodyWithResponse request with any body
	UpdateConditionWithBodyWithResponse(ctx context.Context, conditionId ConditionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConditionResponse, error)

	UpdateConditionWithResponse(ctx context.Context, conditionId ConditionId, body UpdateConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConditionResponse, error)

	// CreatePrescriptionWithBodyWithResponse request with any body
	CreatePrescriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePrescriptionResponse, error)

	CreatePrescriptionWithResponse(ctx context.Context, body CreatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePrescriptionResponse, error)

	// GetPrescriptionsByAppointmentIdWithResponse request
	GetPrescriptionsByAppointmentIdWithResponse(ctx context.Context, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*GetPrescriptionsByAppointmentIdResponse, error)

	// PrescriptionsInDateRangeWithResponse request
	PrescriptionsInDateRangeWithResponse(ctx context.Context, patientId PatientId, params *PrescriptionsInDateRangeParams, reqEditors ...RequestEditorFn) (*PrescriptionsInDateRangeResponse, error)

	// DeletePrescriptionWithResponse request
	DeletePrescriptionWithResponse(ctx context.Context, prescriptionId PrescriptionId, reqEditors ...RequestEditorFn) (*DeletePrescriptionResponse, error)

	// PrescriptionDetailWithResponse request
	PrescriptionDetailWithResponse(ctx context.Context, prescriptionId PrescriptionId, reqEditors ...RequestEditorFn) (*PrescriptionDetailResponse, error)

	// UpdatePrescriptionWithBodyWithResponse request with any body
	UpdatePrescriptionWithBodyWithResponse(ctx context.Context, prescriptionId PrescriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePrescriptionResponse, error)

	UpdatePrescriptionWithResponse(ctx context.Context, prescriptionId PrescriptionId, body UpdatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePrescriptionResponse, error)
}

type CreatePatientConditionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *ConditionDisplay
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePatientConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePatientConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConditionsInDateRangeResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Conditions
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r ConditionsInDateRangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConditionsInDateRangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConditionDetailResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Condition
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r ConditionDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConditionDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConditionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Condition
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePrescriptionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *Prescription
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePrescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePrescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPrescriptionsByAppointmentIdResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Prescriptions
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPrescriptionsByAppointmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPrescriptionsByAppointmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PrescriptionsInDateRangeResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Prescriptions
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PrescriptionsInDateRangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PrescriptionsInDateRangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePrescriptionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePrescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePrescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PrescriptionDetailResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Prescription
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PrescriptionDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PrescriptionDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePrescriptionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Prescription
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdatePrescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePrescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreatePatientConditionWithBodyWithResponse request with arbitrary body returning *CreatePatientConditionResponse
func (c *ClientWithResponses) CreatePatientConditionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePatientConditionResponse, error) {
	rsp, err := c.CreatePatientConditionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePatientConditionResponse(rsp)
}

func (c *ClientWithResponses) CreatePatientConditionWithResponse(ctx context.Context, body CreatePatientConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePatientConditionResponse, error) {
	rsp, err := c.CreatePatientCondition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePatientConditionResponse(rsp)
}

// ConditionsInDateRangeWithResponse request returning *ConditionsInDateRangeResponse
func (c *ClientWithResponses) ConditionsInDateRangeWithResponse(ctx context.Context, patientId PatientId, params *ConditionsInDateRangeParams, reqEditors ...RequestEditorFn) (*ConditionsInDateRangeResponse, error) {
	rsp, err := c.ConditionsInDateRange(ctx, patientId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConditionsInDateRangeResponse(rsp)
}

// ConditionDetailWithResponse request returning *ConditionDetailResponse
func (c *ClientWithResponses) ConditionDetailWithResponse(ctx context.Context, conditionId ConditionId, reqEditors ...RequestEditorFn) (*ConditionDetailResponse, error) {
	rsp, err := c.ConditionDetail(ctx, conditionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConditionDetailResponse(rsp)
}

// UpdateConditionWithBodyWithResponse request with arbitrary body returning *UpdateConditionResponse
func (c *ClientWithResponses) UpdateConditionWithBodyWithResponse(ctx context.Context, conditionId ConditionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConditionResponse, error) {
	rsp, err := c.UpdateConditionWithBody(ctx, conditionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConditionResponse(rsp)
}

func (c *ClientWithResponses) UpdateConditionWithResponse(ctx context.Context, conditionId ConditionId, body UpdateConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConditionResponse, error) {
	rsp, err := c.UpdateCondition(ctx, conditionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConditionResponse(rsp)
}

// CreatePrescriptionWithBodyWithResponse request with arbitrary body returning *CreatePrescriptionResponse
func (c *ClientWithResponses) CreatePrescriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePrescriptionResponse, error) {
	rsp, err := c.CreatePrescriptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePrescriptionResponse(rsp)
}

func (c *ClientWithResponses) CreatePrescriptionWithResponse(ctx context.Context, body CreatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePrescriptionResponse, error) {
	rsp, err := c.CreatePrescription(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePrescriptionResponse(rsp)
}

// GetPrescriptionsByAppointmentIdWithResponse request returning *GetPrescriptionsByAppointmentIdResponse
func (c *ClientWithResponses) GetPrescriptionsByAppointmentIdWithResponse(ctx context.Context, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*GetPrescriptionsByAppointmentIdResponse, error) {
	rsp, err := c.GetPrescriptionsByAppointmentId(ctx, appointmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPrescriptionsByAppointmentIdResponse(rsp)
}

// PrescriptionsInDateRangeWithResponse request returning *PrescriptionsInDateRangeResponse
func (c *ClientWithResponses) PrescriptionsInDateRangeWithResponse(ctx context.Context, patientId PatientId, params *PrescriptionsInDateRangeParams, reqEditors ...RequestEditorFn) (*PrescriptionsInDateRangeResponse, error) {
	rsp, err := c.PrescriptionsInDateRange(ctx, patientId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePrescriptionsInDateRangeResponse(rsp)
}

// DeletePrescriptionWithResponse request returning *DeletePrescriptionResponse
func (c *ClientWithResponses) DeletePrescriptionWithResponse(ctx context.Context, prescriptionId PrescriptionId, reqEditors ...RequestEditorFn) (*DeletePrescriptionResponse, error) {
	rsp, err := c.DeletePrescription(ctx, prescriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePrescriptionResponse(rsp)
}

// PrescriptionDetailWithResponse request returning *PrescriptionDetailResponse
func (c *ClientWithResponses) PrescriptionDetailWithResponse(ctx context.Context, prescriptionId PrescriptionId, reqEditors ...RequestEditorFn) (*PrescriptionDetailResponse, error) {
	rsp, err := c.PrescriptionDetail(ctx, prescriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePrescriptionDetailResponse(rsp)
}

// UpdatePrescriptionWithBodyWithResponse request with arbitrary body returning *UpdatePrescriptionResponse
func (c *ClientWithResponses) UpdatePrescriptionWithBodyWithResponse(ctx context.Context, prescriptionId PrescriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePrescriptionResponse, error) {
	rsp, err := c.UpdatePrescriptionWithBody(ctx, prescriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePrescriptionResponse(rsp)
}

func (c *ClientWithResponses) UpdatePrescriptionWithResponse(ctx context.Context, prescriptionId PrescriptionId, body UpdatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePrescriptionResponse, error) {
	rsp, err := c.UpdatePrescription(ctx, prescriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePrescriptionResponse(rsp)
}

// ParseCreatePatientConditionResponse parses an HTTP response from a CreatePatientConditionWithResponse call
func ParseCreatePatientConditionResponse(rsp *http.Response) (*CreatePatientConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePatientConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ConditionDisplay
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseConditionsInDateRangeResponse parses an HTTP response from a ConditionsInDateRangeWithResponse call
func ParseConditionsInDateRangeResponse(rsp *http.Response) (*ConditionsInDateRangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConditionsInDateRangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Conditions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseConditionDetailResponse parses an HTTP response from a ConditionDetailWithResponse call
func ParseConditionDetailResponse(rsp *http.Response) (*ConditionDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConditionDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Condition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateConditionResponse parses an HTTP response from a UpdateConditionWithResponse call
func ParseUpdateConditionResponse(rsp *http.Response) (*UpdateConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Condition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreatePrescriptionResponse parses an HTTP response from a CreatePrescriptionWithResponse call
func ParseCreatePrescriptionResponse(rsp *http.Response) (*CreatePrescriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePrescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Prescription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetPrescriptionsByAppointmentIdResponse parses an HTTP response from a GetPrescriptionsByAppointmentIdWithResponse call
func ParseGetPrescriptionsByAppointmentIdResponse(rsp *http.Response) (*GetPrescriptionsByAppointmentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPrescriptionsByAppointmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Prescriptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePrescriptionsInDateRangeResponse parses an HTTP response from a PrescriptionsInDateRangeWithResponse call
func ParsePrescriptionsInDateRangeResponse(rsp *http.Response) (*PrescriptionsInDateRangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PrescriptionsInDateRangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Prescriptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeletePrescriptionResponse parses an HTTP response from a DeletePrescriptionWithResponse call
func ParseDeletePrescriptionResponse(rsp *http.Response) (*DeletePrescriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePrescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePrescriptionDetailResponse parses an HTTP response from a PrescriptionDetailWithResponse call
func ParsePrescriptionDetailResponse(rsp *http.Response) (*PrescriptionDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PrescriptionDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Prescription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePrescriptionResponse parses an HTTP response from a UpdatePrescriptionWithResponse call
func ParseUpdatePrescriptionResponse(rsp *http.Response) (*UpdatePrescriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePrescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Prescription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}
