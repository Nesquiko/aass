// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/Nesquiko/aass/common/server/api"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/nullable"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AppointmentStatus.
const (
	Cancelled AppointmentStatus = "cancelled"
	Completed AppointmentStatus = "completed"
	Denied    AppointmentStatus = "denied"
	Requested AppointmentStatus = "requested"
	Scheduled AppointmentStatus = "scheduled"
)

// Defines values for AppointmentType.
const (
	AnnualPhysical  AppointmentType = "annual_physical"
	Consultation    AppointmentType = "consultation"
	FollowUp        AppointmentType = "follow_up"
	NewPatient      AppointmentType = "new_patient"
	Procedure       AppointmentType = "procedure"
	RegularCheck    AppointmentType = "regular_check"
	SpecialistVisit AppointmentType = "specialist_visit"
	UrgentCare      AppointmentType = "urgent_care"
	Vaccination     AppointmentType = "vaccination"
)

// AppointmentDisplay Represents an appointment view.
type AppointmentDisplay struct {
	// AppointmentDateTime The date time of the appointment.
	AppointmentDateTime time.Time `json:"appointmentDateTime"`
	DoctorName          string    `json:"doctorName"`

	// Id Unique identifier for the appointment.
	Id          openapi_types.UUID `json:"id"`
	PatientName string             `json:"patientName"`

	// Status The current status of the appointment.
	Status AppointmentStatus `json:"status"`

	// Type The type of the appointment.
	Type AppointmentType `json:"type"`
}

// AppointmentStatus The current status of the appointment.
type AppointmentStatus string

// AppointmentType The type of the appointment.
type AppointmentType string

// Condition defines model for Condition.
type Condition struct {
	Appointments    []AppointmentDisplay  `json:"appointments"`
	AppointmentsIds *[]openapi_types.UUID `json:"appointmentsIds,omitempty"`
	End             *time.Time            `json:"end,omitempty"`
	Id              *openapi_types.UUID   `json:"id,omitempty"`
	Name            string                `json:"name"`
	Start           time.Time             `json:"start"`
}

// ConditionDisplay Basic info about a patient's condition.
type ConditionDisplay struct {
	AppointmentsIds *[]openapi_types.UUID `json:"appointmentsIds,omitempty"`
	End             *time.Time            `json:"end,omitempty"`
	Id              *openapi_types.UUID   `json:"id,omitempty"`
	Name            string                `json:"name"`
	Start           time.Time             `json:"start"`
}

// NewCondition defines model for NewCondition.
type NewCondition struct {
	AppointmentsIds *[]openapi_types.UUID `json:"appointmentsIds,omitempty"`
	End             *time.Time            `json:"end,omitempty"`
	Id              *openapi_types.UUID   `json:"id,omitempty"`
	Name            string                `json:"name"`
	PatientId       openapi_types.UUID    `json:"patientId"`
	Start           time.Time             `json:"start"`
}

// NewPrescription defines model for NewPrescription.
type NewPrescription struct {
	AppointmentId *openapi_types.UUID `json:"appointmentId,omitempty"`
	DoctorsNote   *string             `json:"doctorsNote,omitempty"`
	End           time.Time           `json:"end"`
	Name          string              `json:"name"`
	PatientId     openapi_types.UUID  `json:"patientId"`
	Start         time.Time           `json:"start"`
}

// Prescription defines model for Prescription.
type Prescription struct {
	// Appointment Represents an appointment view.
	Appointment   *AppointmentDisplay `json:"appointment,omitempty"`
	AppointmentId *openapi_types.UUID `json:"appointmentId,omitempty"`
	DoctorsNote   *string             `json:"doctorsNote,omitempty"`
	End           time.Time           `json:"end"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	Name          string              `json:"name"`
	Start         time.Time           `json:"start"`
}

// PrescriptionDisplay Basic info about a patient's condition.
type PrescriptionDisplay struct {
	AppointmentId *openapi_types.UUID `json:"appointmentId,omitempty"`
	End           time.Time           `json:"end"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	Name          string              `json:"name"`
	Start         time.Time           `json:"start"`
}

// UpdateCondition defines model for UpdateCondition.
type UpdateCondition struct {
	End       nullable.Nullable[time.Time] `json:"end"`
	Name      *string                      `json:"name,omitempty"`
	PatientId *openapi_types.UUID          `json:"patientId,omitempty"`
	Start     *time.Time                   `json:"start,omitempty"`
}

// UpdatePrescription defines model for UpdatePrescription.
type UpdatePrescription struct {
	AppointmentId *openapi_types.UUID `json:"appointmentId,omitempty"`
	DoctorsNote   *string             `json:"doctorsNote,omitempty"`
	End           *time.Time          `json:"end,omitempty"`
	Name          *string             `json:"name,omitempty"`
	PatientId     *openapi_types.UUID `json:"patientId,omitempty"`
	Start         *time.Time          `json:"start,omitempty"`
}

// AppointmentId defines model for appointmentId.
type AppointmentId = openapi_types.UUID

// ConditionId defines model for conditionId.
type ConditionId = openapi_types.UUID

// From defines model for from.
type From = openapi_types.Date

// PatientId defines model for patientId.
type PatientId = openapi_types.UUID

// PrescriptionId defines model for prescriptionId.
type PrescriptionId = openapi_types.UUID

// To defines model for to.
type To = openapi_types.Date

// Conditions defines model for Conditions.
type Conditions struct {
	Conditions []ConditionDisplay `json:"conditions"`
}

// Prescriptions defines model for Prescriptions.
type Prescriptions struct {
	Prescriptions []PrescriptionDisplay `json:"prescriptions"`
}

// ConditionsInDateRangeParams defines parameters for ConditionsInDateRange.
type ConditionsInDateRangeParams struct {
	// From The specific day form which to retrieve resources.
	From From `form:"from" json:"from"`

	// To The specific day to which to retrieve resources.
	To *To `form:"to,omitempty" json:"to,omitempty"`
}

// PrescriptionsInDateRangeParams defines parameters for PrescriptionsInDateRange.
type PrescriptionsInDateRangeParams struct {
	// From The specific day form which to retrieve resources.
	From From `form:"from" json:"from"`

	// To The specific day to which to retrieve resources.
	To *To `form:"to,omitempty" json:"to,omitempty"`
}

// CreatePatientConditionJSONRequestBody defines body for CreatePatientCondition for application/json ContentType.
type CreatePatientConditionJSONRequestBody = NewCondition

// UpdateConditionJSONRequestBody defines body for UpdateCondition for application/json ContentType.
type UpdateConditionJSONRequestBody = UpdateCondition

// CreatePrescriptionJSONRequestBody defines body for CreatePrescription for application/json ContentType.
type CreatePrescriptionJSONRequestBody = NewPrescription

// UpdatePrescriptionJSONRequestBody defines body for UpdatePrescription for application/json ContentType.
type UpdatePrescriptionJSONRequestBody = UpdatePrescription

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a condition record for a patient
	// (POST /conditions)
	CreatePatientCondition(w http.ResponseWriter, r *http.Request)
	// Conditions in date range
	// (GET /conditions/patient/{patientId})
	ConditionsInDateRange(w http.ResponseWriter, r *http.Request, patientId PatientId, params ConditionsInDateRangeParams)
	// Condition detail
	// (GET /conditions/{conditionId})
	ConditionDetail(w http.ResponseWriter, r *http.Request, conditionId ConditionId)
	// Update a condition
	// (PATCH /conditions/{conditionId})
	UpdateCondition(w http.ResponseWriter, r *http.Request, conditionId ConditionId)
	// Create a prescriptions record for a patient
	// (POST /prescriptions)
	CreatePrescription(w http.ResponseWriter, r *http.Request)
	// Get prescriptions by appointment ID
	// (GET /prescriptions/appointment/{appointmentId})
	GetPrescriptionsByAppointmentId(w http.ResponseWriter, r *http.Request, appointmentId AppointmentId)
	// Prescriptions in date range
	// (GET /prescriptions/patient/{patientId})
	PrescriptionsInDateRange(w http.ResponseWriter, r *http.Request, patientId PatientId, params PrescriptionsInDateRangeParams)
	// Delete prescription
	// (DELETE /prescriptions/{prescriptionId})
	DeletePrescription(w http.ResponseWriter, r *http.Request, prescriptionId PrescriptionId)
	// Prescription detail
	// (GET /prescriptions/{prescriptionId})
	PrescriptionDetail(w http.ResponseWriter, r *http.Request, prescriptionId PrescriptionId)
	// Update prescription
	// (PATCH /prescriptions/{prescriptionId})
	UpdatePrescription(w http.ResponseWriter, r *http.Request, prescriptionId PrescriptionId)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Create a condition record for a patient
// (POST /conditions)
func (_ Unimplemented) CreatePatientCondition(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Conditions in date range
// (GET /conditions/patient/{patientId})
func (_ Unimplemented) ConditionsInDateRange(w http.ResponseWriter, r *http.Request, patientId PatientId, params ConditionsInDateRangeParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Condition detail
// (GET /conditions/{conditionId})
func (_ Unimplemented) ConditionDetail(w http.ResponseWriter, r *http.Request, conditionId ConditionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a condition
// (PATCH /conditions/{conditionId})
func (_ Unimplemented) UpdateCondition(w http.ResponseWriter, r *http.Request, conditionId ConditionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a prescriptions record for a patient
// (POST /prescriptions)
func (_ Unimplemented) CreatePrescription(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get prescriptions by appointment ID
// (GET /prescriptions/appointment/{appointmentId})
func (_ Unimplemented) GetPrescriptionsByAppointmentId(w http.ResponseWriter, r *http.Request, appointmentId AppointmentId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Prescriptions in date range
// (GET /prescriptions/patient/{patientId})
func (_ Unimplemented) PrescriptionsInDateRange(w http.ResponseWriter, r *http.Request, patientId PatientId, params PrescriptionsInDateRangeParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete prescription
// (DELETE /prescriptions/{prescriptionId})
func (_ Unimplemented) DeletePrescription(w http.ResponseWriter, r *http.Request, prescriptionId PrescriptionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Prescription detail
// (GET /prescriptions/{prescriptionId})
func (_ Unimplemented) PrescriptionDetail(w http.ResponseWriter, r *http.Request, prescriptionId PrescriptionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update prescription
// (PATCH /prescriptions/{prescriptionId})
func (_ Unimplemented) UpdatePrescription(w http.ResponseWriter, r *http.Request, prescriptionId PrescriptionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreatePatientCondition operation middleware
func (siw *ServerInterfaceWrapper) CreatePatientCondition(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePatientCondition(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConditionsInDateRange operation middleware
func (siw *ServerInterfaceWrapper) ConditionsInDateRange(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "patientId" -------------
	var patientId PatientId

	err = runtime.BindStyledParameterWithOptions("simple", "patientId", chi.URLParam(r, "patientId"), &patientId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "patientId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ConditionsInDateRangeParams

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConditionsInDateRange(w, r, patientId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConditionDetail operation middleware
func (siw *ServerInterfaceWrapper) ConditionDetail(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "conditionId" -------------
	var conditionId ConditionId

	err = runtime.BindStyledParameterWithOptions("simple", "conditionId", chi.URLParam(r, "conditionId"), &conditionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "conditionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConditionDetail(w, r, conditionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateCondition operation middleware
func (siw *ServerInterfaceWrapper) UpdateCondition(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "conditionId" -------------
	var conditionId ConditionId

	err = runtime.BindStyledParameterWithOptions("simple", "conditionId", chi.URLParam(r, "conditionId"), &conditionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "conditionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCondition(w, r, conditionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePrescription operation middleware
func (siw *ServerInterfaceWrapper) CreatePrescription(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePrescription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPrescriptionsByAppointmentId operation middleware
func (siw *ServerInterfaceWrapper) GetPrescriptionsByAppointmentId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "appointmentId" -------------
	var appointmentId AppointmentId

	err = runtime.BindStyledParameterWithOptions("simple", "appointmentId", chi.URLParam(r, "appointmentId"), &appointmentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "appointmentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPrescriptionsByAppointmentId(w, r, appointmentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PrescriptionsInDateRange operation middleware
func (siw *ServerInterfaceWrapper) PrescriptionsInDateRange(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "patientId" -------------
	var patientId PatientId

	err = runtime.BindStyledParameterWithOptions("simple", "patientId", chi.URLParam(r, "patientId"), &patientId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "patientId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PrescriptionsInDateRangeParams

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PrescriptionsInDateRange(w, r, patientId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePrescription operation middleware
func (siw *ServerInterfaceWrapper) DeletePrescription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "prescriptionId" -------------
	var prescriptionId PrescriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "prescriptionId", chi.URLParam(r, "prescriptionId"), &prescriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "prescriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePrescription(w, r, prescriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PrescriptionDetail operation middleware
func (siw *ServerInterfaceWrapper) PrescriptionDetail(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "prescriptionId" -------------
	var prescriptionId PrescriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "prescriptionId", chi.URLParam(r, "prescriptionId"), &prescriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "prescriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PrescriptionDetail(w, r, prescriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePrescription operation middleware
func (siw *ServerInterfaceWrapper) UpdatePrescription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "prescriptionId" -------------
	var prescriptionId PrescriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "prescriptionId", chi.URLParam(r, "prescriptionId"), &prescriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "prescriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePrescription(w, r, prescriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/conditions", wrapper.CreatePatientCondition)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/conditions/patient/{patientId}", wrapper.ConditionsInDateRange)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/conditions/{conditionId}", wrapper.ConditionDetail)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/conditions/{conditionId}", wrapper.UpdateCondition)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/prescriptions", wrapper.CreatePrescription)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/prescriptions/appointment/{appointmentId}", wrapper.GetPrescriptionsByAppointmentId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/prescriptions/patient/{patientId}", wrapper.PrescriptionsInDateRange)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/prescriptions/{prescriptionId}", wrapper.DeletePrescription)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/prescriptions/{prescriptionId}", wrapper.PrescriptionDetail)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/prescriptions/{prescriptionId}", wrapper.UpdatePrescription)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../common/server/api/common-openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
