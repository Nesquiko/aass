// Package doctorapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package doctorapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AppointmentStatus.
const (
	Cancelled AppointmentStatus = "cancelled"
	Completed AppointmentStatus = "completed"
	Denied    AppointmentStatus = "denied"
	Requested AppointmentStatus = "requested"
	Scheduled AppointmentStatus = "scheduled"
)

// Defines values for AppointmentType.
const (
	RegularCheck AppointmentType = "regular_check"
)

// Defines values for SpecializationEnum.
const (
	Cardiologist        SpecializationEnum = "cardiologist"
	Dermatologist       SpecializationEnum = "dermatologist"
	Diagnostician       SpecializationEnum = "diagnostician"
	Endocrinologist     SpecializationEnum = "endocrinologist"
	Gastroenterologist  SpecializationEnum = "gastroenterologist"
	GeneralPractitioner SpecializationEnum = "general_practitioner"
	Neurologist         SpecializationEnum = "neurologist"
	Oncologist          SpecializationEnum = "oncologist"
	Orthopedist         SpecializationEnum = "orthopedist"
	Other               SpecializationEnum = "other"
	Pediatrician        SpecializationEnum = "pediatrician"
	Psychiatrist        SpecializationEnum = "psychiatrist"
	Radiologist         SpecializationEnum = "radiologist"
	Surgeon             SpecializationEnum = "surgeon"
	Urologist           SpecializationEnum = "urologist"
)

// Defines values for TimeSlotStatus.
const (
	Available   TimeSlotStatus = "available"
	Unavailable TimeSlotStatus = "unavailable"
)

// Defines values for UserRole.
const (
	UserRoleDoctor UserRole = "doctor"
)

// AppointmentDisplay Represents an appointment view.
type AppointmentDisplay struct {
	AppointmentDateTime time.Time          `json:"appointmentDateTime"`
	DoctorName          string             `json:"doctorName"`
	Id                  openapi_types.UUID `json:"id"`
	PatientName         string             `json:"patientName"`
	Status              AppointmentStatus  `json:"status"`
	Type                AppointmentType    `json:"type"`
}

// AppointmentStatus defines model for AppointmentStatus.
type AppointmentStatus string

// AppointmentType defines model for AppointmentType.
type AppointmentType string

// Doctor defines model for Doctor.
type Doctor struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	LastName  string              `json:"lastName"`
	Role      *UserRole           `json:"role,omitempty"`

	// Specialization Medical specialization of a doctor.
	Specialization SpecializationEnum `json:"specialization"`
}

// DoctorCalendar defines model for DoctorCalendar.
type DoctorCalendar struct {
	Appointments *[]AppointmentDisplay `json:"appointments,omitempty"`
}

// ErrorDetail Standardized error details (RFC 9457).
type ErrorDetail struct {
	Code                 string                 `json:"code"`
	Detail               string                 `json:"detail"`
	Status               int                    `json:"status"`
	Title                string                 `json:"title"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NewDoctorRequest defines model for NewDoctorRequest.
type NewDoctorRequest struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`

	// Specialization Medical specialization of a doctor.
	Specialization SpecializationEnum `json:"specialization"`
}

// Patient defines model for Patient.
type Patient struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	LastName  string              `json:"lastName"`
	Role      *UserRole           `json:"role,omitempty"`
}

// SpecializationEnum Medical specialization of a doctor.
type SpecializationEnum string

// TimeSlot Represents a single time slot for a doctor on a specific day.
type TimeSlot struct {
	Status TimeSlotStatus `json:"status"`
	Time   string         `json:"time"`
}

// TimeSlotStatus defines model for TimeSlot.Status.
type TimeSlotStatus string

// UserRole defines model for UserRole.
type UserRole string

// Date defines model for date.
type Date = openapi_types.Date

// DateTime defines model for dateTime.
type DateTime = time.Time

// DoctorEmail defines model for doctorEmail.
type DoctorEmail = openapi_types.Email

// DoctorId defines model for doctorId.
type DoctorId = openapi_types.UUID

// From defines model for from.
type From = openapi_types.Date

// To defines model for to.
type To = openapi_types.Date

// DoctorTimeslots defines model for DoctorTimeslots.
type DoctorTimeslots struct {
	Slots []TimeSlot `json:"slots"`
}

// Doctors defines model for Doctors.
type Doctors struct {
	Doctors []Doctor `json:"doctors"`
}

// InternalServerErrorResponse Standardized error details (RFC 9457).
type InternalServerErrorResponse = ErrorDetail

// AvailableDoctorsParams defines parameters for AvailableDoctors.
type AvailableDoctorsParams struct {
	// DateTime The specific date and time (ISO 8601 format).
	DateTime DateTime `form:"dateTime" json:"dateTime"`
}

// DoctorsCalendarParams defines parameters for DoctorsCalendar.
type DoctorsCalendarParams struct {
	// From The start date (inclusive) for retrieving resources (YYYY-MM-DD format).
	From From `form:"from" json:"from"`

	// To The end date (inclusive) for retrieving resources (YYYY-MM-DD format).
	To *To `form:"to,omitempty" json:"to,omitempty"`
}

// DoctorsTimeslotsParams defines parameters for DoctorsTimeslots.
type DoctorsTimeslotsParams struct {
	// Date The specific day (YYYY-MM-DD format).
	Date Date `form:"date" json:"date"`
}

// CreateDoctorJSONRequestBody defines body for CreateDoctor for application/json ContentType.
type CreateDoctorJSONRequestBody = NewDoctorRequest

// Getter for additional properties for ErrorDetail. Returns the specified
// element and whether it was found
func (a ErrorDetail) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail
func (a *ErrorDetail) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a *ErrorDetail) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["code"]; found {
		err = json.Unmarshal(raw, &a.Code)
		if err != nil {
			return fmt.Errorf("error reading 'code': %w", err)
		}
		delete(object, "code")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a ErrorDetail) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["code"], err = json.Marshal(a.Code)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'code': %w", err)
	}

	object["detail"], err = json.Marshal(a.Detail)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'detail': %w", err)
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	object["title"], err = json.Marshal(a.Title)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'title': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDoctors request
	GetDoctors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDoctorWithBody request with any body
	CreateDoctorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDoctor(ctx context.Context, body CreateDoctorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AvailableDoctors request
	AvailableDoctors(ctx context.Context, params *AvailableDoctorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDoctorByEmail request
	GetDoctorByEmail(ctx context.Context, email DoctorEmail, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDoctorById request
	GetDoctorById(ctx context.Context, doctorId DoctorId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DoctorsCalendar request
	DoctorsCalendar(ctx context.Context, doctorId DoctorId, params *DoctorsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DoctorsTimeslots request
	DoctorsTimeslots(ctx context.Context, doctorId DoctorId, params *DoctorsTimeslotsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDoctors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDoctorsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDoctorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDoctorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDoctor(ctx context.Context, body CreateDoctorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDoctorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AvailableDoctors(ctx context.Context, params *AvailableDoctorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAvailableDoctorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDoctorByEmail(ctx context.Context, email DoctorEmail, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDoctorByEmailRequest(c.Server, email)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDoctorById(ctx context.Context, doctorId DoctorId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDoctorByIdRequest(c.Server, doctorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DoctorsCalendar(ctx context.Context, doctorId DoctorId, params *DoctorsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDoctorsCalendarRequest(c.Server, doctorId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DoctorsTimeslots(ctx context.Context, doctorId DoctorId, params *DoctorsTimeslotsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDoctorsTimeslotsRequest(c.Server, doctorId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDoctorsRequest generates requests for GetDoctors
func NewGetDoctorsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/doctors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDoctorRequest calls the generic CreateDoctor builder with application/json body
func NewCreateDoctorRequest(server string, body CreateDoctorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDoctorRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDoctorRequestWithBody generates requests for CreateDoctor with any type of body
func NewCreateDoctorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/doctors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAvailableDoctorsRequest generates requests for AvailableDoctors
func NewAvailableDoctorsRequest(server string, params *AvailableDoctorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/doctors/available")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTime", runtime.ParamLocationQuery, params.DateTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDoctorByEmailRequest generates requests for GetDoctorByEmail
func NewGetDoctorByEmailRequest(server string, email DoctorEmail) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/doctors/email/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDoctorByIdRequest generates requests for GetDoctorById
func NewGetDoctorByIdRequest(server string, doctorId DoctorId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, doctorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/doctors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDoctorsCalendarRequest generates requests for DoctorsCalendar
func NewDoctorsCalendarRequest(server string, doctorId DoctorId, params *DoctorsCalendarParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, doctorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/doctors/%s/calendar", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDoctorsTimeslotsRequest generates requests for DoctorsTimeslots
func NewDoctorsTimeslotsRequest(server string, doctorId DoctorId, params *DoctorsTimeslotsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, doctorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/doctors/%s/timeslots", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDoctorsWithResponse request
	GetDoctorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDoctorsResponse, error)

	// CreateDoctorWithBodyWithResponse request with any body
	CreateDoctorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDoctorResponse, error)

	CreateDoctorWithResponse(ctx context.Context, body CreateDoctorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDoctorResponse, error)

	// AvailableDoctorsWithResponse request
	AvailableDoctorsWithResponse(ctx context.Context, params *AvailableDoctorsParams, reqEditors ...RequestEditorFn) (*AvailableDoctorsResponse, error)

	// GetDoctorByEmailWithResponse request
	GetDoctorByEmailWithResponse(ctx context.Context, email DoctorEmail, reqEditors ...RequestEditorFn) (*GetDoctorByEmailResponse, error)

	// GetDoctorByIdWithResponse request
	GetDoctorByIdWithResponse(ctx context.Context, doctorId DoctorId, reqEditors ...RequestEditorFn) (*GetDoctorByIdResponse, error)

	// DoctorsCalendarWithResponse request
	DoctorsCalendarWithResponse(ctx context.Context, doctorId DoctorId, params *DoctorsCalendarParams, reqEditors ...RequestEditorFn) (*DoctorsCalendarResponse, error)

	// DoctorsTimeslotsWithResponse request
	DoctorsTimeslotsWithResponse(ctx context.Context, doctorId DoctorId, params *DoctorsTimeslotsParams, reqEditors ...RequestEditorFn) (*DoctorsTimeslotsResponse, error)
}

type GetDoctorsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Doctors
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDoctorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDoctorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDoctorResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *Doctor
	ApplicationproblemJSON409 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateDoctorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDoctorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AvailableDoctorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Doctors *[]Doctor `json:"doctors,omitempty"`
	}
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r AvailableDoctorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AvailableDoctorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDoctorByEmailResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Doctor
	ApplicationproblemJSON404 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDoctorByEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDoctorByEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDoctorByIdResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Doctor
	ApplicationproblemJSON404 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDoctorByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDoctorByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DoctorsCalendarResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *DoctorCalendar
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DoctorsCalendarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DoctorsCalendarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DoctorsTimeslotsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *DoctorTimeslots
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DoctorsTimeslotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DoctorsTimeslotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDoctorsWithResponse request returning *GetDoctorsResponse
func (c *ClientWithResponses) GetDoctorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDoctorsResponse, error) {
	rsp, err := c.GetDoctors(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDoctorsResponse(rsp)
}

// CreateDoctorWithBodyWithResponse request with arbitrary body returning *CreateDoctorResponse
func (c *ClientWithResponses) CreateDoctorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDoctorResponse, error) {
	rsp, err := c.CreateDoctorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDoctorResponse(rsp)
}

func (c *ClientWithResponses) CreateDoctorWithResponse(ctx context.Context, body CreateDoctorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDoctorResponse, error) {
	rsp, err := c.CreateDoctor(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDoctorResponse(rsp)
}

// AvailableDoctorsWithResponse request returning *AvailableDoctorsResponse
func (c *ClientWithResponses) AvailableDoctorsWithResponse(ctx context.Context, params *AvailableDoctorsParams, reqEditors ...RequestEditorFn) (*AvailableDoctorsResponse, error) {
	rsp, err := c.AvailableDoctors(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAvailableDoctorsResponse(rsp)
}

// GetDoctorByEmailWithResponse request returning *GetDoctorByEmailResponse
func (c *ClientWithResponses) GetDoctorByEmailWithResponse(ctx context.Context, email DoctorEmail, reqEditors ...RequestEditorFn) (*GetDoctorByEmailResponse, error) {
	rsp, err := c.GetDoctorByEmail(ctx, email, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDoctorByEmailResponse(rsp)
}

// GetDoctorByIdWithResponse request returning *GetDoctorByIdResponse
func (c *ClientWithResponses) GetDoctorByIdWithResponse(ctx context.Context, doctorId DoctorId, reqEditors ...RequestEditorFn) (*GetDoctorByIdResponse, error) {
	rsp, err := c.GetDoctorById(ctx, doctorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDoctorByIdResponse(rsp)
}

// DoctorsCalendarWithResponse request returning *DoctorsCalendarResponse
func (c *ClientWithResponses) DoctorsCalendarWithResponse(ctx context.Context, doctorId DoctorId, params *DoctorsCalendarParams, reqEditors ...RequestEditorFn) (*DoctorsCalendarResponse, error) {
	rsp, err := c.DoctorsCalendar(ctx, doctorId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDoctorsCalendarResponse(rsp)
}

// DoctorsTimeslotsWithResponse request returning *DoctorsTimeslotsResponse
func (c *ClientWithResponses) DoctorsTimeslotsWithResponse(ctx context.Context, doctorId DoctorId, params *DoctorsTimeslotsParams, reqEditors ...RequestEditorFn) (*DoctorsTimeslotsResponse, error) {
	rsp, err := c.DoctorsTimeslots(ctx, doctorId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDoctorsTimeslotsResponse(rsp)
}

// ParseGetDoctorsResponse parses an HTTP response from a GetDoctorsWithResponse call
func ParseGetDoctorsResponse(rsp *http.Response) (*GetDoctorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDoctorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Doctors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateDoctorResponse parses an HTTP response from a CreateDoctorWithResponse call
func ParseCreateDoctorResponse(rsp *http.Response) (*CreateDoctorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDoctorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Doctor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseAvailableDoctorsResponse parses an HTTP response from a AvailableDoctorsWithResponse call
func ParseAvailableDoctorsResponse(rsp *http.Response) (*AvailableDoctorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AvailableDoctorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Doctors *[]Doctor `json:"doctors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetDoctorByEmailResponse parses an HTTP response from a GetDoctorByEmailWithResponse call
func ParseGetDoctorByEmailResponse(rsp *http.Response) (*GetDoctorByEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDoctorByEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Doctor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetDoctorByIdResponse parses an HTTP response from a GetDoctorByIdWithResponse call
func ParseGetDoctorByIdResponse(rsp *http.Response) (*GetDoctorByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDoctorByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Doctor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDoctorsCalendarResponse parses an HTTP response from a DoctorsCalendarWithResponse call
func ParseDoctorsCalendarResponse(rsp *http.Response) (*DoctorsCalendarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DoctorsCalendarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DoctorCalendar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDoctorsTimeslotsResponse parses an HTTP response from a DoctorsTimeslotsWithResponse call
func ParseDoctorsTimeslotsResponse(rsp *http.Response) (*DoctorsTimeslotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DoctorsTimeslotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DoctorTimeslots
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}
