// Package resourceapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package resourceapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	externalRef0 "github.com/Nesquiko/aass/common/server/api"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ResourceType.
const (
	ResourceTypeEquipment ResourceType = "equipment"
	ResourceTypeFacility  ResourceType = "facility"
	ResourceTypeMedicine  ResourceType = "medicine"
)

// AvailableResources Lists of available resources (facilities, equipment, medicine) for a specific date and time slot.
type AvailableResources struct {
	// Equipment List of available equipment.
	Equipment []Equipment `json:"equipment"`

	// Facilities List of available facilities.
	Facilities []Facility `json:"facilities"`

	// Medicine List of available medicine (assuming medicine can be 'allocated' or has limited stock per slot).
	Medicine []Medicine `json:"medicine"`
}

// Equipment Represents a required equipment resource.
type Equipment struct {
	// Id Unique identifier for the equipment.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the equipment.
	Name string `json:"name"`
}

// Facility Represents a required facility resource.
type Facility struct {
	// Id Unique identifier for the facility.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the facility.
	Name string `json:"name"`
}

// Medicine Represents a required medicine resource.
type Medicine struct {
	// Id Unique identifier for the medicine.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the medicine.
	Name string `json:"name"`
}

// NewResource Represents a resource.
type NewResource struct {
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the medicine.
	Name string       `json:"name"`
	Type ResourceType `json:"type"`
}

// ResourceType defines model for ResourceType.
type ResourceType string

// AppointmentId defines model for appointmentId.
type AppointmentId = openapi_types.UUID

// DateTime defines model for date-time.
type DateTime = time.Time

// GetAvailableResourcesParams defines parameters for GetAvailableResources.
type GetAvailableResourcesParams struct {
	DateTime DateTime `form:"date-time" json:"date-time"`
}

// ReserveAppointmentResourcesJSONBody defines parameters for ReserveAppointmentResources.
type ReserveAppointmentResourcesJSONBody struct {
	EquipmentId *openapi_types.UUID `json:"equipmentId,omitempty"`
	FacilityId  *openapi_types.UUID `json:"facilityId,omitempty"`
	MedicineId  *openapi_types.UUID `json:"medicineId,omitempty"`
	Start       time.Time           `json:"start"`
}

// CreateResourceJSONRequestBody defines body for CreateResource for application/json ContentType.
type CreateResourceJSONRequestBody = NewResource

// ReserveAppointmentResourcesJSONRequestBody defines body for ReserveAppointmentResources for application/json ContentType.
type ReserveAppointmentResourcesJSONRequestBody ReserveAppointmentResourcesJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateResourceWithBody request with any body
	CreateResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateResource(ctx context.Context, body CreateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAvailableResources request
	GetAvailableResources(ctx context.Context, params *GetAvailableResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReserveAppointmentResourcesWithBody request with any body
	ReserveAppointmentResourcesWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReserveAppointmentResources(ctx context.Context, appointmentId AppointmentId, body ReserveAppointmentResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResource(ctx context.Context, body CreateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAvailableResources(ctx context.Context, params *GetAvailableResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAvailableResourcesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReserveAppointmentResourcesWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReserveAppointmentResourcesRequestWithBody(c.Server, appointmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReserveAppointmentResources(ctx context.Context, appointmentId AppointmentId, body ReserveAppointmentResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReserveAppointmentResourcesRequest(c.Server, appointmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateResourceRequest calls the generic CreateResource builder with application/json body
func NewCreateResourceRequest(server string, body CreateResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateResourceRequestWithBody generates requests for CreateResource with any type of body
func NewCreateResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAvailableResourcesRequest generates requests for GetAvailableResources
func NewGetAvailableResourcesRequest(server string, params *GetAvailableResourcesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/available")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date-time", runtime.ParamLocationQuery, params.DateTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReserveAppointmentResourcesRequest calls the generic ReserveAppointmentResources builder with application/json body
func NewReserveAppointmentResourcesRequest(server string, appointmentId AppointmentId, body ReserveAppointmentResourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReserveAppointmentResourcesRequestWithBody(server, appointmentId, "application/json", bodyReader)
}

// NewReserveAppointmentResourcesRequestWithBody generates requests for ReserveAppointmentResources with any type of body
func NewReserveAppointmentResourcesRequestWithBody(server string, appointmentId AppointmentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appointmentId", runtime.ParamLocationPath, appointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/reserve/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateResourceWithBodyWithResponse request with any body
	CreateResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceResponse, error)

	CreateResourceWithResponse(ctx context.Context, body CreateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceResponse, error)

	// GetAvailableResourcesWithResponse request
	GetAvailableResourcesWithResponse(ctx context.Context, params *GetAvailableResourcesParams, reqEditors ...RequestEditorFn) (*GetAvailableResourcesResponse, error)

	// ReserveAppointmentResourcesWithBodyWithResponse request with any body
	ReserveAppointmentResourcesWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReserveAppointmentResourcesResponse, error)

	ReserveAppointmentResourcesWithResponse(ctx context.Context, appointmentId AppointmentId, body ReserveAppointmentResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReserveAppointmentResourcesResponse, error)
}

type CreateResourceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *NewResource
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAvailableResourcesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AvailableResources
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAvailableResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAvailableResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReserveAppointmentResourcesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON404 *externalRef0.ErrorDetail
	ApplicationproblemJSON500 *externalRef0.InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r ReserveAppointmentResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReserveAppointmentResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateResourceWithBodyWithResponse request with arbitrary body returning *CreateResourceResponse
func (c *ClientWithResponses) CreateResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceResponse, error) {
	rsp, err := c.CreateResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceResponse(rsp)
}

func (c *ClientWithResponses) CreateResourceWithResponse(ctx context.Context, body CreateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceResponse, error) {
	rsp, err := c.CreateResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceResponse(rsp)
}

// GetAvailableResourcesWithResponse request returning *GetAvailableResourcesResponse
func (c *ClientWithResponses) GetAvailableResourcesWithResponse(ctx context.Context, params *GetAvailableResourcesParams, reqEditors ...RequestEditorFn) (*GetAvailableResourcesResponse, error) {
	rsp, err := c.GetAvailableResources(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAvailableResourcesResponse(rsp)
}

// ReserveAppointmentResourcesWithBodyWithResponse request with arbitrary body returning *ReserveAppointmentResourcesResponse
func (c *ClientWithResponses) ReserveAppointmentResourcesWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReserveAppointmentResourcesResponse, error) {
	rsp, err := c.ReserveAppointmentResourcesWithBody(ctx, appointmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReserveAppointmentResourcesResponse(rsp)
}

func (c *ClientWithResponses) ReserveAppointmentResourcesWithResponse(ctx context.Context, appointmentId AppointmentId, body ReserveAppointmentResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReserveAppointmentResourcesResponse, error) {
	rsp, err := c.ReserveAppointmentResources(ctx, appointmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReserveAppointmentResourcesResponse(rsp)
}

// ParseCreateResourceResponse parses an HTTP response from a CreateResourceWithResponse call
func ParseCreateResourceResponse(rsp *http.Response) (*CreateResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NewResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetAvailableResourcesResponse parses an HTTP response from a GetAvailableResourcesWithResponse call
func ParseGetAvailableResourcesResponse(rsp *http.Response) (*GetAvailableResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAvailableResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AvailableResources
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseReserveAppointmentResourcesResponse parses an HTTP response from a ReserveAppointmentResourcesWithResponse call
func ParseReserveAppointmentResourcesResponse(rsp *http.Response) (*ReserveAppointmentResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReserveAppointmentResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}
