openapi: 3.0.4
info:
  title: Appointment Service API
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - description: Appointment Service Endpoint
    url: /
tags:
  - name: Appointments
paths:
  # ... (other paths like /appointments, /appointments/{appointmentId}, /patients/... remain the same) ...
  /appointments:
    post:
      tags:
        - Appointments
      summary: Patient creates an appointment request
      operationId: requestAppointment
      requestBody:
        description: Basic info about the appointment request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAppointmentRequest"
      responses:
        "201":
          description: Appointment successfully requested.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientAppointment"
        "400":
          description: Bad Request - Invalid input data (e.g., invalid UUID, date format).
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "409":
          description: Conflict - Could not schedule appointment (e.g., doctor unavailable at requested time).
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /appointments/{appointmentId}:
    post: # Decide
      tags:
        - Appointments
      description: Doctor either accepts or denies patients appointment request.
      summary: Decide appointment's status
      operationId: decideAppointment
      parameters:
        - $ref: "#/components/parameters/appointmentId"
      requestBody:
        description: Whether doctor accepts or denies patients appointment request. Includes resources to reserve on accept.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppointmentDecision"
      responses:
        "200":
          description: Appointment successfully accepted or denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorAppointment"
        "400":
          description: Bad Request - Invalid input data for decision.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "404":
          description: Appointment not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "409":
          description: Conflict - Resource unavailable or appointment state prevents decision.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
    patch: # Reschedule
      tags:
        - Appointments
      description: Reschedules patients appointment, also changes state of the appointment to requested. Can be initiated by patient or doctor (context determines validation).
      summary: Reschedule an appointment
      operationId: rescheduleAppointment
      parameters:
        - $ref: "#/components/parameters/appointmentId"
      requestBody:
        description: New date/time for the appointment and reason.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppointmentReschedule"
      responses:
        "200":
          description: Appointment successfully rescheduled (status set to requested). Returns the updated appointment view relevant to the caller (determined by gateway/auth).
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/PatientAppointment"
                  - $ref: "#/components/schemas/DoctorAppointment"
        "400":
          description: Bad Request - Invalid input data for reschedule.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "404":
          description: Appointment not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "409":
          description: Conflict - Doctor unavailable at the new time or appointment state prevents reschedule.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
    delete: # Cancel
      tags:
        - Appointments
      summary: Cancel an appointment
      operationId: cancelAppointment
      parameters:
        - $ref: "#/components/parameters/appointmentId"
      requestBody:
        description: Reason for cancelling the appointment and who cancelled.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppointmentCancellation"
      responses:
        "204":
          description: Appointment successfully cancelled.
        "400":
          description: Bad Request - Invalid input data for cancellation.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "404":
          description: Appointment not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "409":
          description: Conflict - Appointment state prevents cancellation (e.g., already completed).
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /patients/{patientId}/appointments:
    get:
      tags:
        - Appointments
      summary: Get all appointments for a patient (Patient View)
      operationId: getPatientAppointments
      parameters:
        - $ref: "#/components/parameters/patientId"
        - $ref: "#/components/parameters/queryFrom"
        - $ref: "#/components/parameters/queryTo"
        - $ref: "#/components/parameters/queryStatus"
      responses:
        "200":
          description: List of patient's appointments.
          content:
            application/json:
              schema:
                type: object
                required:
                  - appointments
                properties:
                  appointments:
                    type: array
                    items:
                      $ref: "#/components/schemas/PatientAppointment"
        "404":
          description: Patient not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /patients/{patientId}/appointment/{appointmentId}:
    get:
      tags:
        - Appointments
      summary: Get specific appointment scheduled by patient (Patient View)
      operationId: getPatientAppointmentById
      parameters:
        - $ref: "#/components/parameters/patientId"
        - $ref: "#/components/parameters/appointmentId"
      responses:
        "200":
          description: Appointment details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientAppointment"
        "404":
          description: Appointment or Patient not found, or appointment does not belong to patient.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /doctors/{doctorId}/appointments: # <<< MODIFIED PATH OPERATION
    get:
      tags:
        - Appointments
      summary: Get appointments for a doctor, optionally filtered by date or date range (Doctor View) # Updated summary
      description: | # Updated description
        Retrieves appointments scheduled for a specific doctor.
        Can be filtered by:
        - A specific `date` (YYYY-MM-DD).
        - A date range using `from` (inclusive) and `to` (inclusive) dates (YYYY-MM-DD).
        - Appointment `status`.
        If no date parameters (`date`, `from`, `to`) are provided, it may return all appointments or a default range based on implementation.
        Providing both `date` and `from`/`to` might result in an error or prioritize one over the other (API should define this behavior, e.g., prioritize `date`).
      operationId: getDoctorAppointments # Renamed operationId
      parameters:
        - $ref: "#/components/parameters/doctorId" # Path parameter
        - $ref: "#/components/parameters/queryDate" # Optional single date filter
        - $ref: "#/components/parameters/queryFrom" # Optional range start filter
        - $ref: "#/components/parameters/queryTo" # Optional range end filter
        - $ref: "#/components/parameters/queryStatus" # Optional status filter
      responses:
        "200":
          description: Successfully retrieved appointments for the doctor, filtered as requested.
          content:
            application/json:
              schema:
                type: object
                required:
                  - appointments
                properties:
                  appointments:
                    type: array
                    items:
                      $ref: "#/components/schemas/DoctorAppointment" # Returns doctor view
        "400":
          description: Bad Request - Invalid parameter format (e.g., date) or conflicting parameters (e.g., providing both `date` and `from`/`to` if not supported).
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
              examples:
                invalidDate:
                  summary: Example invalid date format
                  value:
                    title: Bad Request
                    status: 400
                    code: request.invalid-parameter
                    detail: "Invalid format for parameter 'date'. Expected YYYY-MM-DD."
                conflictingParams:
                  summary: Example conflicting date parameters
                  value:
                    title: Bad Request
                    status: 400
                    code: request.conflicting-parameters
                    detail: "Cannot provide both 'date' and 'from'/'to' parameters simultaneously."
        "404":
          description: Doctor not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
              examples:
                doctorNotFound:
                  summary: Example doctor not found
                  value:
                    title: Resource Not Found
                    status: 404
                    code: doctor.not-found
                    detail: Doctor with ID ffffffff-aaaa-bbbb-cccc-dddddddddddd not found.
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /doctors/{doctorId}/appointment/{appointmentId}:
    get:
      tags:
        - Appointments
      summary: Get specific appointment scheduled to a doctor (Doctor View)
      operationId: getDoctorAppointmentById
      parameters:
        - $ref: "#/components/parameters/doctorId"
        - $ref: "#/components/parameters/appointmentId"
      responses:
        "200":
          description: Appointment details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorAppointment"
        "404":
          description: Appointment or Doctor not found, or appointment does not belong to doctor.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

components:
  schemas:
    # ... (All schemas remain the same as in the previous version) ...
    UserRole:
      type: string
      enum:
        - patient
        - doctor
    AppointmentType:
      type: string
      description: The type of the appointment.
      enum:
        - regular_check
      default: regular_check
    AppointmentStatus:
      type: string
      description: The current status of the appointment.
      enum:
        - requested
        - cancelled
        - scheduled
        - completed
        - denied
      example: scheduled
    NewAppointmentRequest:
      type: object
      required:
        - patientId
        - doctorId
        - appointmentDateTime
        - type
      properties:
        patientId:
          type: string
          format: uuid
        doctorId:
          type: string
          format: uuid
        appointmentDateTime:
          type: string
          format: date-time
        type:
          $ref: "#/components/schemas/AppointmentType"
        conditionId:
          type: string
          format: uuid
        reason:
          type: string
          description: Reason provided by the patient for the appointment request.
          example: "Follow-up check after medication change."
    ConditionDisplay:
      type: object
      description: Basic info about a patient's condition (likely enriched).
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name
    PrescriptionDisplay:
      type: object
      description: Basic info about a patient's prescription (likely enriched).
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name
    Patient:
      type: object
      description: Basic patient details (likely enriched).
      required:
        - id
        - firstName
        - lastName
        - email
        - role
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [patient]
          readOnly: true
    SpecializationEnum:
      type: string
      description: Medical specialization of a doctor.
      enum:
        - surgeon
        - gastroenterologist
        - pediatrician
        - diagnostician
        - endocrinologist
        - general_practitioner
        - cardiologist
        - dermatologist
        - neurologist
        - oncologist
        - orthopedist
        - psychiatrist
        - radiologist
        - urologist
        - other
    Doctor:
      type: object
      description: Basic doctor details including specialization (likely enriched).
      required:
        - id
        - firstName
        - lastName
        - email
        - role
        - specialization
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [doctor]
          readOnly: true
        specialization:
          $ref: "#/components/schemas/SpecializationEnum"
    Facility:
      type: object
      description: Basic facility details (likely enriched).
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name
    Equipment:
      type: object
      description: Basic equipment details (likely enriched).
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name
    Medicine:
      type: object
      description: Basic medicine details (likely enriched).
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name
    AppointmentBase:
      type: object
      description: Contains basic information about an appointment, common to all views.
      required:
        - id
        - appointmentDateTime
        - type
        - status
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        appointmentDateTime:
          type: string
          format: date-time
        type:
          $ref: "#/components/schemas/AppointmentType"
        condition:
          $ref: "#/components/schemas/ConditionDisplay"
        status:
          $ref: "#/components/schemas/AppointmentStatus"
        reason:
          type: string
          readOnly: true
        cancellationReason:
          type: string
          readOnly: true
        canceledBy:
          $ref: "#/components/schemas/UserRole"
          readOnly: true
        denialReason:
          type: string
          readOnly: true
        prescriptions:
          type: array
          items:
            $ref: "#/components/schemas/PrescriptionDisplay"
          readOnly: true
    PatientAppointment:
      allOf:
        - $ref: "#/components/schemas/AppointmentBase"
        - type: object
          required:
            - doctor
          properties:
            doctor:
              $ref: "#/components/schemas/Doctor"
    DoctorAppointment:
      allOf:
        - $ref: "#/components/schemas/AppointmentBase"
        - type: object
          required:
            - patient
          properties:
            patient:
              $ref: "#/components/schemas/Patient"
            facilities:
              type: array
              items:
                $ref: "#/components/schemas/Facility"
              readOnly: true
            equipment:
              type: array
              items:
                $ref: "#/components/schemas/Equipment"
              readOnly: true
            medicine:
              type: array
              items:
                $ref: "#/components/schemas/Medicine"
              readOnly: true
    AppointmentDecision:
      type: object
      description: Data required for staff to accept or reject an appointment request.
      required:
        - action
      properties:
        action:
          type: string
          enum: [accept, reject]
          example: accept
        reason:
          type: string
          description: Reason for rejecting the appointment (required if action is 'reject').
          example: "Doctor is unavailable at the requested time."
        facilities:
          type: array
          description: List of facility IDs to reserve if accepting.
          items:
            type: string
            format: uuid
        equipment:
          type: array
          description: List of equipment IDs to reserve if accepting.
          items:
            type: string
            format: uuid
        medicine:
          type: array
          description: List of medicine IDs to reserve if accepting.
          items:
            type: string
            format: uuid
    AppointmentCancellation:
      type: object
      required:
        - by
        - reason
      properties:
        by:
          $ref: "#/components/schemas/UserRole"
        reason:
          type: string
          minLength: 1
          description: Reason for cancelling the appointment.
          example: "Patient needs to reschedule due to conflict."
    AppointmentReschedule:
      type: object
      required:
        - newAppointmentDateTime
      properties:
        newAppointmentDateTime:
          type: string
          format: date-time
        reason:
          type: string
          description: Reason for rescheduling the appointment.
          example: "Previous slot conflicted with another meeting."
    ErrorDetail:
      type: object
      description: Standardized error details (RFC 9457).
      properties:
        title:
          type: string
        code:
          type: string
        status:
          type: integer
        detail:
          type: string
      additionalProperties: true
      required:
        - title
        - code
        - status
        - detail

  parameters:
    appointmentId:
      name: appointmentId
      in: path
      required: true
      description: The unique identifier (UUID) of the appointment.
      schema:
        type: string
        format: uuid
      example: a1b2c3d4-e5f6-7890-1234-567890abcdef
    patientId:
      name: patientId
      in: path
      required: true
      description: The unique identifier (UUID) of the patient.
      schema:
        type: string
        format: uuid
      example: 123e4567-e89b-12d3-a456-426614174000
    doctorId:
      name: doctorId
      in: path
      required: true
      description: The unique identifier (UUID) of the doctor.
      schema:
        type: string
        format: uuid
      example: ffffffff-aaaa-bbbb-cccc-dddddddddddd
    queryDate:
      name: date
      in: query
      required: false # <<< Made optional
      description: Filter appointments for a specific date (YYYY-MM-DD format). Mutually exclusive with 'from'/'to'.
      schema:
        type: string
        format: date
      example: "2024-07-15"
    queryFrom:
      name: from
      in: query
      required: false
      description: The start date (inclusive, YYYY-MM-DD format) for filtering appointments. Use with 'to' for a range.
      schema:
        type: string
        format: date
      example: "2024-07-01"
    queryTo:
      name: to
      in: query
      required: false
      description: The end date (inclusive, YYYY-MM-DD format) for filtering appointments. Use with 'from' for a range.
      schema:
        type: string
        format: date
      example: "2024-07-31"
    queryStatus:
      name: status
      in: query
      required: false
      description: Filter appointments by status.
      schema:
        $ref: "#/components/schemas/AppointmentStatus"
      example: scheduled

  responses:
    InternalServerErrorResponse:
      description: An unexpected error occurred on the server.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorDetail"
          example:
            title: Internal Server Error
            status: 500
            code: internal.server.error
            detail: An unknown server error occurred while processing the request.
