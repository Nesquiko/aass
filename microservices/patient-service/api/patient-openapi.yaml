openapi: 3.0.4
info:
  title: Patient Service API
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - description: Patient Service Endpoint
    url: / # Base path handled by gateway routing
tags:
  - name: Patients
paths:
  /patients: # Path for creating patients
    post:
      tags:
        - Patients
      summary: Create a new patient profile
      description: Creates a new patient record. This might be called internally after successful registration in the Auth service.
      operationId: createPatient
      requestBody:
        description: Details of the patient to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPatientRequest"
            examples:
              newPatient:
                summary: Example new patient request
                value:
                  email: new.patient@example.com
                  firstName: Jane
                  lastName: Smith
      responses:
        "201":
          description: Patient profile created successfully. Returns the created patient object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
        "409":
          description: Conflict - A patient with the provided email already exists.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
              examples:
                duplicateEmail:
                  summary: Example duplicate email error (409)
                  value:
                    title: Conflict
                    status: 409
                    code: patient.email-exists
                    detail: A patient with email new.patient@example.com already exists.
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /patients/lookup/by-email:
    get:
      tags:
        - Patients
      summary: Get patient by email address
      description: Retrieves the details of a specific patient using their email address.
      operationId: getPatientByEmail
      parameters:
        - name: email
          in: query
          required: true
          description: The email address of the patient to retrieve.
          schema:
            type: string
            format: email
          example: jane.smith@example.com
      responses:
        "200":
          description: Successfully retrieved patient details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
        "404":
          description: Not Found - No patient with the specified email address exists.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
              examples:
                patientEmailNotFound: # Added example
                  summary: Example patient email not found (404)
                  value:
                    title: Resource Not Found
                    status: 404
                    code: patient.email-not-found # Specific code for email lookup
                    detail: Patient with email unknown.patient@example.com not found.
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /patients/{patientId}:
    get:
      tags:
        - Patients
      summary: Get patient by ID
      description: Retrieves the details of a specific patient by their unique identifier.
      operationId: getPatientById
      parameters:
        - $ref: "#/components/parameters/patientId"
      responses:
        "200":
          description: Successfully retrieved patient details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
        "404":
          description: Not Found - The specified patient ID does not exist.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
              examples:
                patientNotFound:
                  summary: Example patient not found (404)
                  value:
                    title: Resource Not Found
                    status: 404
                    code: patient.not-found # Code for ID lookup
                    detail: Patient with ID f47ac10b-58cc-4372-a567-0e02b2c3d479 not found.
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  # <<< NEW ENDPOINT ADDED HERE >>>
  /patients/{patientId}/calendar:
    get:
      tags:
        - Patients
      summary: Get patient's calendar view
      description: Retrieves a consolidated view of a patient's appointments, conditions, and prescriptions within a specified time range. This view is aggregated by the Patient Service.
      operationId: getPatientCalendar
      parameters:
        - $ref: "#/components/parameters/patientId"
        - $ref: "#/components/parameters/from" # Reference new 'from' parameter
        - $ref: "#/components/parameters/to" # Reference new 'to' parameter
      responses:
        "200":
          description: Successfully retrieved patient calendar view for the specified time range.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientCalendarView" # Reference new schema
        "404": # Patient not found
          description: Not Found - The specified patient ID does not exist.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
              examples:
                patientNotFoundForCalendar:
                  summary: Example patient not found for calendar (404)
                  value:
                    title: Resource Not Found
                    status: 404
                    code: patient.not-found
                    detail: Patient with ID f47ac10b-58cc-4372-a567-0e02b2c3d479 not found.
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

components:
  schemas:
    UserRole:
      type: string
      enum:
        - patient
      default: patient
      readOnly: true
    NewPatientRequest:
      type: object
      required:
        - email
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: new.patient@example.com
        firstName:
          type: string
          minLength: 1
          example: Jane
        lastName:
          type: string
          minLength: 1
          example: Smith
    Patient:
      type: object
      required:
        - id
        - firstName
        - lastName
        - email
        - role
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        role:
          $ref: "#/components/schemas/UserRole"

    # --- Schemas needed for PatientCalendarView ---
    AppointmentStatus: # Copied from Appointment Service spec for reference
      type: string
      enum:
        - requested
        - cancelled
        - scheduled
        - completed
        - denied
      example: scheduled
    AppointmentType: # Copied from Appointment Service spec for reference
      type: string
      enum:
        - regular_check
      example: regular_check
    AppointmentDisplay: # Simplified view, assuming Patient Service gets this data
      type: object
      description: Represents an appointment relevant to the patient's calendar.
      properties:
        id:
          type: string
          format: uuid
        appointmentDateTime:
          type: string
          format: date-time
        doctorName: # Assuming Patient service can get/construct this
          type: string
          example: "Dr. Gregory House"
        status:
          $ref: "#/components/schemas/AppointmentStatus"
        type:
          $ref: "#/components/schemas/AppointmentType"
      required:
        - id
        - appointmentDateTime
        - doctorName
        - status
        - type
    ConditionDisplay: # Simplified view
      type: object
      description: Represents a condition relevant to the patient's calendar.
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Hypertension"
        start:
          type: string
          format: date-time
        end: # Optional end date
          type: string
          format: date-time
          nullable: true
      required:
        - id
        - name
        - start
    PrescriptionDisplay: # Simplified view
      type: object
      description: Represents a prescription relevant to the patient's calendar.
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Lisinopril 10mg"
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
      required:
        - id
        - name
        - start
        - end
    # --- End Schemas for PatientCalendarView ---

    # <<< NEW SCHEMA ADDED HERE >>>
    PatientCalendarView:
      type: object
      description: Consolidated view of a patient's calendar items within a time range.
      properties:
        appointments:
          type: array
          items:
            $ref: "#/components/schemas/AppointmentDisplay"
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/ConditionDisplay"
        prescriptions:
          type: array
          items:
            $ref: "#/components/schemas/PrescriptionDisplay"
      # Decide if empty arrays are acceptable or if the fields are required
      # required:
      #   - appointments
      #   - conditions
      #   - prescriptions

    ErrorDetail:
      type: object
      description: Standardized error details (RFC 9457).
      properties:
        title:
          type: string
        code:
          type: string
        status:
          type: integer
          format: int
        detail:
          type: string
      additionalProperties: true
      required:
        - title
        - code
        - status
        - detail

  parameters:
    patientId:
      name: patientId
      in: path
      required: true
      description: The unique identifier (UUID) of the patient.
      schema:
        type: string
        format: uuid
      example: b2c3d4e5-f6a7-8901-2345-67890abcdef1
    # <<< NEW PARAMETERS ADDED HERE >>>
    from:
      name: from
      in: query
      required: true # Make 'from' required for calendar view
      description: The start date (inclusive) for retrieving calendar items (YYYY-MM-DD format).
      schema:
        type: string
        format: date
      example: "2024-07-01"
    to:
      name: to
      in: query
      required: true # Make 'to' required for calendar view
      description: The end date (inclusive) for retrieving calendar items (YYYY-MM-DD format).
      schema:
        type: string
        format: date
      example: "2024-07-31"

  responses:
    InternalServerErrorResponse:
      description: An error occurred. See specific status code for details.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorDetail"
          example:
            title: Internal server error
            status: 500
            code: internal.server.error
            detail: An unknown server error occurred
