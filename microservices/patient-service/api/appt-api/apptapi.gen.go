// Package apptapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apptapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AppointmentDecisionAction.
const (
	Accept AppointmentDecisionAction = "accept"
	Reject AppointmentDecisionAction = "reject"
)

// Defines values for AppointmentStatus.
const (
	Cancelled AppointmentStatus = "cancelled"
	Completed AppointmentStatus = "completed"
	Denied    AppointmentStatus = "denied"
	Requested AppointmentStatus = "requested"
	Scheduled AppointmentStatus = "scheduled"
)

// Defines values for AppointmentType.
const (
	RegularCheck AppointmentType = "regular_check"
)

// Defines values for DoctorRole.
const (
	DoctorRoleDoctor DoctorRole = "doctor"
)

// Defines values for PatientRole.
const (
	PatientRolePatient PatientRole = "patient"
)

// Defines values for SpecializationEnum.
const (
	Cardiologist        SpecializationEnum = "cardiologist"
	Dermatologist       SpecializationEnum = "dermatologist"
	Diagnostician       SpecializationEnum = "diagnostician"
	Endocrinologist     SpecializationEnum = "endocrinologist"
	Gastroenterologist  SpecializationEnum = "gastroenterologist"
	GeneralPractitioner SpecializationEnum = "general_practitioner"
	Neurologist         SpecializationEnum = "neurologist"
	Oncologist          SpecializationEnum = "oncologist"
	Orthopedist         SpecializationEnum = "orthopedist"
	Other               SpecializationEnum = "other"
	Pediatrician        SpecializationEnum = "pediatrician"
	Psychiatrist        SpecializationEnum = "psychiatrist"
	Radiologist         SpecializationEnum = "radiologist"
	Surgeon             SpecializationEnum = "surgeon"
	Urologist           SpecializationEnum = "urologist"
)

// Defines values for UserRole.
const (
	UserRoleDoctor  UserRole = "doctor"
	UserRolePatient UserRole = "patient"
)

// AppointmentBase Contains basic information about an appointment, common to all views.
type AppointmentBase struct {
	AppointmentDateTime time.Time `json:"appointmentDateTime"`
	CanceledBy          *UserRole `json:"canceledBy,omitempty"`
	CancellationReason  *string   `json:"cancellationReason,omitempty"`

	// Condition Basic info about a patient's condition (likely enriched).
	Condition     *ConditionDisplay      `json:"condition,omitempty"`
	DenialReason  *string                `json:"denialReason,omitempty"`
	Id            *openapi_types.UUID    `json:"id,omitempty"`
	Prescriptions *[]PrescriptionDisplay `json:"prescriptions,omitempty"`
	Reason        *string                `json:"reason,omitempty"`

	// Status The current status of the appointment.
	Status AppointmentStatus `json:"status"`

	// Type The type of the appointment.
	Type AppointmentType `json:"type"`
}

// AppointmentCancellation defines model for AppointmentCancellation.
type AppointmentCancellation struct {
	By UserRole `json:"by"`

	// Reason Reason for cancelling the appointment.
	Reason string `json:"reason"`
}

// AppointmentDecision Data required for staff to accept or reject an appointment request.
type AppointmentDecision struct {
	Action AppointmentDecisionAction `json:"action"`

	// Equipment List of equipment IDs to reserve if accepting.
	Equipment *[]openapi_types.UUID `json:"equipment,omitempty"`

	// Facilities List of facility IDs to reserve if accepting.
	Facilities *[]openapi_types.UUID `json:"facilities,omitempty"`

	// Medicine List of medicine IDs to reserve if accepting.
	Medicine *[]openapi_types.UUID `json:"medicine,omitempty"`

	// Reason Reason for rejecting the appointment (required if action is 'reject').
	Reason *string `json:"reason,omitempty"`
}

// AppointmentDecisionAction defines model for AppointmentDecision.Action.
type AppointmentDecisionAction string

// AppointmentReschedule defines model for AppointmentReschedule.
type AppointmentReschedule struct {
	NewAppointmentDateTime time.Time `json:"newAppointmentDateTime"`

	// Reason Reason for rescheduling the appointment.
	Reason *string `json:"reason,omitempty"`
}

// AppointmentStatus The current status of the appointment.
type AppointmentStatus string

// AppointmentType The type of the appointment.
type AppointmentType string

// ConditionDisplay Basic info about a patient's condition (likely enriched).
type ConditionDisplay struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// Doctor Basic doctor details including specialization (likely enriched).
type Doctor struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        openapi_types.UUID  `json:"id"`
	LastName  string              `json:"lastName"`
	Role      *DoctorRole         `json:"role,omitempty"`

	// Specialization Medical specialization of a doctor.
	Specialization SpecializationEnum `json:"specialization"`
}

// DoctorRole defines model for Doctor.Role.
type DoctorRole string

// DoctorAppointment defines model for DoctorAppointment.
type DoctorAppointment struct {
	AppointmentDateTime time.Time `json:"appointmentDateTime"`
	CanceledBy          *UserRole `json:"canceledBy,omitempty"`
	CancellationReason  *string   `json:"cancellationReason,omitempty"`

	// Condition Basic info about a patient's condition (likely enriched).
	Condition    *ConditionDisplay   `json:"condition,omitempty"`
	DenialReason *string             `json:"denialReason,omitempty"`
	Equipment    *[]Equipment        `json:"equipment,omitempty"`
	Facilities   *[]Facility         `json:"facilities,omitempty"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	Medicine     *[]Medicine         `json:"medicine,omitempty"`

	// Patient Basic patient details (likely enriched).
	Patient       Patient                `json:"patient"`
	Prescriptions *[]PrescriptionDisplay `json:"prescriptions,omitempty"`
	Reason        *string                `json:"reason,omitempty"`

	// Status The current status of the appointment.
	Status AppointmentStatus `json:"status"`

	// Type The type of the appointment.
	Type AppointmentType `json:"type"`
}

// Equipment Basic equipment details (likely enriched).
type Equipment struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// ErrorDetail Standardized error details (RFC 9457).
type ErrorDetail struct {
	Code                 string                 `json:"code"`
	Detail               string                 `json:"detail"`
	Status               int                    `json:"status"`
	Title                string                 `json:"title"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Facility Basic facility details (likely enriched).
type Facility struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// Medicine Basic medicine details (likely enriched).
type Medicine struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// NewAppointmentRequest defines model for NewAppointmentRequest.
type NewAppointmentRequest struct {
	AppointmentDateTime time.Time           `json:"appointmentDateTime"`
	ConditionId         *openapi_types.UUID `json:"conditionId,omitempty"`
	DoctorId            openapi_types.UUID  `json:"doctorId"`
	PatientId           openapi_types.UUID  `json:"patientId"`

	// Reason Reason provided by the patient for the appointment request.
	Reason *string `json:"reason,omitempty"`

	// Type The type of the appointment.
	Type AppointmentType `json:"type"`
}

// Patient Basic patient details (likely enriched).
type Patient struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        openapi_types.UUID  `json:"id"`
	LastName  string              `json:"lastName"`
	Role      *PatientRole        `json:"role,omitempty"`
}

// PatientRole defines model for Patient.Role.
type PatientRole string

// PatientAppointment defines model for PatientAppointment.
type PatientAppointment struct {
	AppointmentDateTime time.Time `json:"appointmentDateTime"`
	CanceledBy          *UserRole `json:"canceledBy,omitempty"`
	CancellationReason  *string   `json:"cancellationReason,omitempty"`

	// Condition Basic info about a patient's condition (likely enriched).
	Condition    *ConditionDisplay `json:"condition,omitempty"`
	DenialReason *string           `json:"denialReason,omitempty"`

	// Doctor Basic doctor details including specialization (likely enriched).
	Doctor        Doctor                 `json:"doctor"`
	Id            *openapi_types.UUID    `json:"id,omitempty"`
	Prescriptions *[]PrescriptionDisplay `json:"prescriptions,omitempty"`
	Reason        *string                `json:"reason,omitempty"`

	// Status The current status of the appointment.
	Status AppointmentStatus `json:"status"`

	// Type The type of the appointment.
	Type AppointmentType `json:"type"`
}

// PrescriptionDisplay Basic info about a patient's prescription (likely enriched).
type PrescriptionDisplay struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// SpecializationEnum Medical specialization of a doctor.
type SpecializationEnum string

// UserRole defines model for UserRole.
type UserRole string

// AppointmentId defines model for appointmentId.
type AppointmentId = openapi_types.UUID

// DoctorId defines model for doctorId.
type DoctorId = openapi_types.UUID

// PatientId defines model for patientId.
type PatientId = openapi_types.UUID

// QueryDate defines model for queryDate.
type QueryDate = openapi_types.Date

// QueryFrom defines model for queryFrom.
type QueryFrom = openapi_types.Date

// QueryStatus The current status of the appointment.
type QueryStatus = AppointmentStatus

// QueryTo defines model for queryTo.
type QueryTo = openapi_types.Date

// InternalServerErrorResponse Standardized error details (RFC 9457).
type InternalServerErrorResponse = ErrorDetail

// GetDoctorAppointmentsParams defines parameters for GetDoctorAppointments.
type GetDoctorAppointmentsParams struct {
	// Date Filter appointments for a specific date (YYYY-MM-DD format). Mutually exclusive with 'from'/'to'.
	Date *QueryDate `form:"date,omitempty" json:"date,omitempty"`

	// From The start date (inclusive, YYYY-MM-DD format) for filtering appointments. Use with 'to' for a range.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To The end date (inclusive, YYYY-MM-DD format) for filtering appointments. Use with 'from' for a range.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Status Filter appointments by status.
	Status *QueryStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetPatientAppointmentsParams defines parameters for GetPatientAppointments.
type GetPatientAppointmentsParams struct {
	// From The start date (inclusive, YYYY-MM-DD format) for filtering appointments. Use with 'to' for a range.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To The end date (inclusive, YYYY-MM-DD format) for filtering appointments. Use with 'from' for a range.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Status Filter appointments by status.
	Status *QueryStatus `form:"status,omitempty" json:"status,omitempty"`
}

// RequestAppointmentJSONRequestBody defines body for RequestAppointment for application/json ContentType.
type RequestAppointmentJSONRequestBody = NewAppointmentRequest

// CancelAppointmentJSONRequestBody defines body for CancelAppointment for application/json ContentType.
type CancelAppointmentJSONRequestBody = AppointmentCancellation

// RescheduleAppointmentJSONRequestBody defines body for RescheduleAppointment for application/json ContentType.
type RescheduleAppointmentJSONRequestBody = AppointmentReschedule

// DecideAppointmentJSONRequestBody defines body for DecideAppointment for application/json ContentType.
type DecideAppointmentJSONRequestBody = AppointmentDecision

// Getter for additional properties for ErrorDetail. Returns the specified
// element and whether it was found
func (a ErrorDetail) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail
func (a *ErrorDetail) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a *ErrorDetail) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["code"]; found {
		err = json.Unmarshal(raw, &a.Code)
		if err != nil {
			return fmt.Errorf("error reading 'code': %w", err)
		}
		delete(object, "code")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a ErrorDetail) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["code"], err = json.Marshal(a.Code)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'code': %w", err)
	}

	object["detail"], err = json.Marshal(a.Detail)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'detail': %w", err)
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	object["title"], err = json.Marshal(a.Title)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'title': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RequestAppointmentWithBody request with any body
	RequestAppointmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RequestAppointment(ctx context.Context, body RequestAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelAppointmentWithBody request with any body
	CancelAppointmentWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelAppointment(ctx context.Context, appointmentId AppointmentId, body CancelAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RescheduleAppointmentWithBody request with any body
	RescheduleAppointmentWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RescheduleAppointment(ctx context.Context, appointmentId AppointmentId, body RescheduleAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DecideAppointmentWithBody request with any body
	DecideAppointmentWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DecideAppointment(ctx context.Context, appointmentId AppointmentId, body DecideAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDoctorAppointmentById request
	GetDoctorAppointmentById(ctx context.Context, doctorId DoctorId, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDoctorAppointments request
	GetDoctorAppointments(ctx context.Context, doctorId DoctorId, params *GetDoctorAppointmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatientAppointmentById request
	GetPatientAppointmentById(ctx context.Context, patientId PatientId, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatientAppointments request
	GetPatientAppointments(ctx context.Context, patientId PatientId, params *GetPatientAppointmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RequestAppointmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestAppointmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestAppointment(ctx context.Context, body RequestAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestAppointmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelAppointmentWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelAppointmentRequestWithBody(c.Server, appointmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelAppointment(ctx context.Context, appointmentId AppointmentId, body CancelAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelAppointmentRequest(c.Server, appointmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RescheduleAppointmentWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRescheduleAppointmentRequestWithBody(c.Server, appointmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RescheduleAppointment(ctx context.Context, appointmentId AppointmentId, body RescheduleAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRescheduleAppointmentRequest(c.Server, appointmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DecideAppointmentWithBody(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDecideAppointmentRequestWithBody(c.Server, appointmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DecideAppointment(ctx context.Context, appointmentId AppointmentId, body DecideAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDecideAppointmentRequest(c.Server, appointmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDoctorAppointmentById(ctx context.Context, doctorId DoctorId, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDoctorAppointmentByIdRequest(c.Server, doctorId, appointmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDoctorAppointments(ctx context.Context, doctorId DoctorId, params *GetDoctorAppointmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDoctorAppointmentsRequest(c.Server, doctorId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatientAppointmentById(ctx context.Context, patientId PatientId, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatientAppointmentByIdRequest(c.Server, patientId, appointmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatientAppointments(ctx context.Context, patientId PatientId, params *GetPatientAppointmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatientAppointmentsRequest(c.Server, patientId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRequestAppointmentRequest calls the generic RequestAppointment builder with application/json body
func NewRequestAppointmentRequest(server string, body RequestAppointmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRequestAppointmentRequestWithBody(server, "application/json", bodyReader)
}

// NewRequestAppointmentRequestWithBody generates requests for RequestAppointment with any type of body
func NewRequestAppointmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelAppointmentRequest calls the generic CancelAppointment builder with application/json body
func NewCancelAppointmentRequest(server string, appointmentId AppointmentId, body CancelAppointmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelAppointmentRequestWithBody(server, appointmentId, "application/json", bodyReader)
}

// NewCancelAppointmentRequestWithBody generates requests for CancelAppointment with any type of body
func NewCancelAppointmentRequestWithBody(server string, appointmentId AppointmentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appointmentId", runtime.ParamLocationPath, appointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRescheduleAppointmentRequest calls the generic RescheduleAppointment builder with application/json body
func NewRescheduleAppointmentRequest(server string, appointmentId AppointmentId, body RescheduleAppointmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRescheduleAppointmentRequestWithBody(server, appointmentId, "application/json", bodyReader)
}

// NewRescheduleAppointmentRequestWithBody generates requests for RescheduleAppointment with any type of body
func NewRescheduleAppointmentRequestWithBody(server string, appointmentId AppointmentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appointmentId", runtime.ParamLocationPath, appointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDecideAppointmentRequest calls the generic DecideAppointment builder with application/json body
func NewDecideAppointmentRequest(server string, appointmentId AppointmentId, body DecideAppointmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDecideAppointmentRequestWithBody(server, appointmentId, "application/json", bodyReader)
}

// NewDecideAppointmentRequestWithBody generates requests for DecideAppointment with any type of body
func NewDecideAppointmentRequestWithBody(server string, appointmentId AppointmentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appointmentId", runtime.ParamLocationPath, appointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/appointments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDoctorAppointmentByIdRequest generates requests for GetDoctorAppointmentById
func NewGetDoctorAppointmentByIdRequest(server string, doctorId DoctorId, appointmentId AppointmentId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, doctorId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appointmentId", runtime.ParamLocationPath, appointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/doctors/%s/appointment/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDoctorAppointmentsRequest generates requests for GetDoctorAppointments
func NewGetDoctorAppointmentsRequest(server string, doctorId DoctorId, params *GetDoctorAppointmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "doctorId", runtime.ParamLocationPath, doctorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/doctors/%s/appointments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatientAppointmentByIdRequest generates requests for GetPatientAppointmentById
func NewGetPatientAppointmentByIdRequest(server string, patientId PatientId, appointmentId AppointmentId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patientId", runtime.ParamLocationPath, patientId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appointmentId", runtime.ParamLocationPath, appointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients/%s/appointment/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatientAppointmentsRequest generates requests for GetPatientAppointments
func NewGetPatientAppointmentsRequest(server string, patientId PatientId, params *GetPatientAppointmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patientId", runtime.ParamLocationPath, patientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patients/%s/appointments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RequestAppointmentWithBodyWithResponse request with any body
	RequestAppointmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestAppointmentResponse, error)

	RequestAppointmentWithResponse(ctx context.Context, body RequestAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestAppointmentResponse, error)

	// CancelAppointmentWithBodyWithResponse request with any body
	CancelAppointmentWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelAppointmentResponse, error)

	CancelAppointmentWithResponse(ctx context.Context, appointmentId AppointmentId, body CancelAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelAppointmentResponse, error)

	// RescheduleAppointmentWithBodyWithResponse request with any body
	RescheduleAppointmentWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RescheduleAppointmentResponse, error)

	RescheduleAppointmentWithResponse(ctx context.Context, appointmentId AppointmentId, body RescheduleAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*RescheduleAppointmentResponse, error)

	// DecideAppointmentWithBodyWithResponse request with any body
	DecideAppointmentWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DecideAppointmentResponse, error)

	DecideAppointmentWithResponse(ctx context.Context, appointmentId AppointmentId, body DecideAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*DecideAppointmentResponse, error)

	// GetDoctorAppointmentByIdWithResponse request
	GetDoctorAppointmentByIdWithResponse(ctx context.Context, doctorId DoctorId, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*GetDoctorAppointmentByIdResponse, error)

	// GetDoctorAppointmentsWithResponse request
	GetDoctorAppointmentsWithResponse(ctx context.Context, doctorId DoctorId, params *GetDoctorAppointmentsParams, reqEditors ...RequestEditorFn) (*GetDoctorAppointmentsResponse, error)

	// GetPatientAppointmentByIdWithResponse request
	GetPatientAppointmentByIdWithResponse(ctx context.Context, patientId PatientId, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*GetPatientAppointmentByIdResponse, error)

	// GetPatientAppointmentsWithResponse request
	GetPatientAppointmentsWithResponse(ctx context.Context, patientId PatientId, params *GetPatientAppointmentsParams, reqEditors ...RequestEditorFn) (*GetPatientAppointmentsResponse, error)
}

type RequestAppointmentResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *PatientAppointment
	ApplicationproblemJSON400 *ErrorDetail
	ApplicationproblemJSON409 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r RequestAppointmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestAppointmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelAppointmentResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ErrorDetail
	ApplicationproblemJSON404 *ErrorDetail
	ApplicationproblemJSON409 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r CancelAppointmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelAppointmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RescheduleAppointmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	ApplicationproblemJSON400 *ErrorDetail
	ApplicationproblemJSON404 *ErrorDetail
	ApplicationproblemJSON409 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r RescheduleAppointmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RescheduleAppointmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DecideAppointmentResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *DoctorAppointment
	ApplicationproblemJSON400 *ErrorDetail
	ApplicationproblemJSON404 *ErrorDetail
	ApplicationproblemJSON409 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DecideAppointmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DecideAppointmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDoctorAppointmentByIdResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *DoctorAppointment
	ApplicationproblemJSON404 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDoctorAppointmentByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDoctorAppointmentByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDoctorAppointmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Appointments []DoctorAppointment `json:"appointments"`
	}
	ApplicationproblemJSON400 *ErrorDetail
	ApplicationproblemJSON404 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDoctorAppointmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDoctorAppointmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatientAppointmentByIdResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PatientAppointment
	ApplicationproblemJSON404 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPatientAppointmentByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatientAppointmentByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatientAppointmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Appointments []PatientAppointment `json:"appointments"`
	}
	ApplicationproblemJSON404 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPatientAppointmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatientAppointmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RequestAppointmentWithBodyWithResponse request with arbitrary body returning *RequestAppointmentResponse
func (c *ClientWithResponses) RequestAppointmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestAppointmentResponse, error) {
	rsp, err := c.RequestAppointmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestAppointmentResponse(rsp)
}

func (c *ClientWithResponses) RequestAppointmentWithResponse(ctx context.Context, body RequestAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestAppointmentResponse, error) {
	rsp, err := c.RequestAppointment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestAppointmentResponse(rsp)
}

// CancelAppointmentWithBodyWithResponse request with arbitrary body returning *CancelAppointmentResponse
func (c *ClientWithResponses) CancelAppointmentWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelAppointmentResponse, error) {
	rsp, err := c.CancelAppointmentWithBody(ctx, appointmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelAppointmentResponse(rsp)
}

func (c *ClientWithResponses) CancelAppointmentWithResponse(ctx context.Context, appointmentId AppointmentId, body CancelAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelAppointmentResponse, error) {
	rsp, err := c.CancelAppointment(ctx, appointmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelAppointmentResponse(rsp)
}

// RescheduleAppointmentWithBodyWithResponse request with arbitrary body returning *RescheduleAppointmentResponse
func (c *ClientWithResponses) RescheduleAppointmentWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RescheduleAppointmentResponse, error) {
	rsp, err := c.RescheduleAppointmentWithBody(ctx, appointmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRescheduleAppointmentResponse(rsp)
}

func (c *ClientWithResponses) RescheduleAppointmentWithResponse(ctx context.Context, appointmentId AppointmentId, body RescheduleAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*RescheduleAppointmentResponse, error) {
	rsp, err := c.RescheduleAppointment(ctx, appointmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRescheduleAppointmentResponse(rsp)
}

// DecideAppointmentWithBodyWithResponse request with arbitrary body returning *DecideAppointmentResponse
func (c *ClientWithResponses) DecideAppointmentWithBodyWithResponse(ctx context.Context, appointmentId AppointmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DecideAppointmentResponse, error) {
	rsp, err := c.DecideAppointmentWithBody(ctx, appointmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDecideAppointmentResponse(rsp)
}

func (c *ClientWithResponses) DecideAppointmentWithResponse(ctx context.Context, appointmentId AppointmentId, body DecideAppointmentJSONRequestBody, reqEditors ...RequestEditorFn) (*DecideAppointmentResponse, error) {
	rsp, err := c.DecideAppointment(ctx, appointmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDecideAppointmentResponse(rsp)
}

// GetDoctorAppointmentByIdWithResponse request returning *GetDoctorAppointmentByIdResponse
func (c *ClientWithResponses) GetDoctorAppointmentByIdWithResponse(ctx context.Context, doctorId DoctorId, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*GetDoctorAppointmentByIdResponse, error) {
	rsp, err := c.GetDoctorAppointmentById(ctx, doctorId, appointmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDoctorAppointmentByIdResponse(rsp)
}

// GetDoctorAppointmentsWithResponse request returning *GetDoctorAppointmentsResponse
func (c *ClientWithResponses) GetDoctorAppointmentsWithResponse(ctx context.Context, doctorId DoctorId, params *GetDoctorAppointmentsParams, reqEditors ...RequestEditorFn) (*GetDoctorAppointmentsResponse, error) {
	rsp, err := c.GetDoctorAppointments(ctx, doctorId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDoctorAppointmentsResponse(rsp)
}

// GetPatientAppointmentByIdWithResponse request returning *GetPatientAppointmentByIdResponse
func (c *ClientWithResponses) GetPatientAppointmentByIdWithResponse(ctx context.Context, patientId PatientId, appointmentId AppointmentId, reqEditors ...RequestEditorFn) (*GetPatientAppointmentByIdResponse, error) {
	rsp, err := c.GetPatientAppointmentById(ctx, patientId, appointmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatientAppointmentByIdResponse(rsp)
}

// GetPatientAppointmentsWithResponse request returning *GetPatientAppointmentsResponse
func (c *ClientWithResponses) GetPatientAppointmentsWithResponse(ctx context.Context, patientId PatientId, params *GetPatientAppointmentsParams, reqEditors ...RequestEditorFn) (*GetPatientAppointmentsResponse, error) {
	rsp, err := c.GetPatientAppointments(ctx, patientId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatientAppointmentsResponse(rsp)
}

// ParseRequestAppointmentResponse parses an HTTP response from a RequestAppointmentWithResponse call
func ParseRequestAppointmentResponse(rsp *http.Response) (*RequestAppointmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RequestAppointmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PatientAppointment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCancelAppointmentResponse parses an HTTP response from a CancelAppointmentWithResponse call
func ParseCancelAppointmentResponse(rsp *http.Response) (*CancelAppointmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelAppointmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseRescheduleAppointmentResponse parses an HTTP response from a RescheduleAppointmentWithResponse call
func ParseRescheduleAppointmentResponse(rsp *http.Response) (*RescheduleAppointmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RescheduleAppointmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDecideAppointmentResponse parses an HTTP response from a DecideAppointmentWithResponse call
func ParseDecideAppointmentResponse(rsp *http.Response) (*DecideAppointmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DecideAppointmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DoctorAppointment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetDoctorAppointmentByIdResponse parses an HTTP response from a GetDoctorAppointmentByIdWithResponse call
func ParseGetDoctorAppointmentByIdResponse(rsp *http.Response) (*GetDoctorAppointmentByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDoctorAppointmentByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DoctorAppointment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetDoctorAppointmentsResponse parses an HTTP response from a GetDoctorAppointmentsWithResponse call
func ParseGetDoctorAppointmentsResponse(rsp *http.Response) (*GetDoctorAppointmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDoctorAppointmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Appointments []DoctorAppointment `json:"appointments"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetPatientAppointmentByIdResponse parses an HTTP response from a GetPatientAppointmentByIdWithResponse call
func ParseGetPatientAppointmentByIdResponse(rsp *http.Response) (*GetPatientAppointmentByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatientAppointmentByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatientAppointment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetPatientAppointmentsResponse parses an HTTP response from a GetPatientAppointmentsWithResponse call
func ParseGetPatientAppointmentsResponse(rsp *http.Response) (*GetPatientAppointmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatientAppointmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Appointments []PatientAppointment `json:"appointments"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}
