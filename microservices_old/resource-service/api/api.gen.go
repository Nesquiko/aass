// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ResourceType.
const (
	ResourceTypeEquipment ResourceType = "equipment"
	ResourceTypeFacility  ResourceType = "facility"
	ResourceTypeMedicine  ResourceType = "medicine"
)

// AvailableResources defines model for AvailableResources.
type AvailableResources struct {
	Equipment  []Equipment `json:"equipment"`
	Facilities []Facility  `json:"facilities"`
	Medicine   []Medicine  `json:"medicine"`
}

// Equipment defines model for Equipment.
type Equipment struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// ErrorDetail Standardized error details (RFC 9457).
type ErrorDetail struct {
	Code                 string                 `json:"code"`
	Detail               string                 `json:"detail"`
	Status               int                    `json:"status"`
	Title                string                 `json:"title"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Facility defines model for Facility.
type Facility struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// Medicine defines model for Medicine.
type Medicine struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// NewResource Represents a new resource definition to be created.
type NewResource struct {
	Name string       `json:"name"`
	Type ResourceType `json:"type"`
}

// Resource Represents a resource definition.
type Resource struct {
	Id   *openapi_types.UUID `json:"id,omitempty"`
	Name string              `json:"name"`
	Type ResourceType        `json:"type"`
}

// ResourceType defines model for ResourceType.
type ResourceType string

// AppointmentId defines model for appointmentId.
type AppointmentId = openapi_types.UUID

// DateTime defines model for date-time.
type DateTime = time.Time

// ResourceId defines model for resourceId.
type ResourceId = openapi_types.UUID

// InternalServerErrorResponse Standardized error details (RFC 9457).
type InternalServerErrorResponse = ErrorDetail

// GetAvailableResourcesParams defines parameters for GetAvailableResources.
type GetAvailableResourcesParams struct {
	DateTime DateTime `form:"date-time" json:"date-time"`
}

// DeleteAppointmentReservationsParams defines parameters for DeleteAppointmentReservations.
type DeleteAppointmentReservationsParams struct {
	AppointmentId openapi_types.UUID `form:"appointmentId" json:"appointmentId"`
}

// ReserveAppointmentResourcesJSONBody defines parameters for ReserveAppointmentResources.
type ReserveAppointmentResourcesJSONBody struct {
	End       time.Time `json:"end"`
	Resources []struct {
		Id   openapi_types.UUID `json:"id"`
		Type ResourceType       `json:"type"`
	} `json:"resources"`
	Start time.Time `json:"start"`
}

// CreateResourceJSONRequestBody defines body for CreateResource for application/json ContentType.
type CreateResourceJSONRequestBody = NewResource

// ReserveAppointmentResourcesJSONRequestBody defines body for ReserveAppointmentResources for application/json ContentType.
type ReserveAppointmentResourcesJSONRequestBody ReserveAppointmentResourcesJSONBody

// Getter for additional properties for ErrorDetail. Returns the specified
// element and whether it was found
func (a ErrorDetail) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail
func (a *ErrorDetail) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a *ErrorDetail) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["code"]; found {
		err = json.Unmarshal(raw, &a.Code)
		if err != nil {
			return fmt.Errorf("error reading 'code': %w", err)
		}
		delete(object, "code")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a ErrorDetail) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["code"], err = json.Marshal(a.Code)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'code': %w", err)
	}

	object["detail"], err = json.Marshal(a.Detail)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'detail': %w", err)
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	object["title"], err = json.Marshal(a.Title)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'title': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create resource definition (Admin)
	// (POST /resources)
	CreateResource(w http.ResponseWriter, r *http.Request)
	// Get available resources for a time slot
	// (GET /resources/available)
	GetAvailableResources(w http.ResponseWriter, r *http.Request, params GetAvailableResourcesParams)
	// Deletes reservations for a cancelled/rescheduled appointment (Internal)
	// (DELETE /resources/reservations)
	DeleteAppointmentReservations(w http.ResponseWriter, r *http.Request, params DeleteAppointmentReservationsParams)
	// Reserves resources for an appointment (Internal)
	// (POST /resources/reserve/{appointmentId})
	ReserveAppointmentResources(w http.ResponseWriter, r *http.Request, appointmentId AppointmentId)
	// Get resource definition by ID
	// (GET /resources/{resourceId})
	GetResourceById(w http.ResponseWriter, r *http.Request, resourceId ResourceId)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Create resource definition (Admin)
// (POST /resources)
func (_ Unimplemented) CreateResource(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get available resources for a time slot
// (GET /resources/available)
func (_ Unimplemented) GetAvailableResources(w http.ResponseWriter, r *http.Request, params GetAvailableResourcesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes reservations for a cancelled/rescheduled appointment (Internal)
// (DELETE /resources/reservations)
func (_ Unimplemented) DeleteAppointmentReservations(w http.ResponseWriter, r *http.Request, params DeleteAppointmentReservationsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reserves resources for an appointment (Internal)
// (POST /resources/reserve/{appointmentId})
func (_ Unimplemented) ReserveAppointmentResources(w http.ResponseWriter, r *http.Request, appointmentId AppointmentId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get resource definition by ID
// (GET /resources/{resourceId})
func (_ Unimplemented) GetResourceById(w http.ResponseWriter, r *http.Request, resourceId ResourceId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateResource operation middleware
func (siw *ServerInterfaceWrapper) CreateResource(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateResource(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAvailableResources operation middleware
func (siw *ServerInterfaceWrapper) GetAvailableResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAvailableResourcesParams

	// ------------- Required query parameter "date-time" -------------

	if paramValue := r.URL.Query().Get("date-time"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "date-time"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date-time", r.URL.Query(), &params.DateTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date-time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAvailableResources(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAppointmentReservations operation middleware
func (siw *ServerInterfaceWrapper) DeleteAppointmentReservations(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteAppointmentReservationsParams

	// ------------- Required query parameter "appointmentId" -------------

	if paramValue := r.URL.Query().Get("appointmentId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "appointmentId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "appointmentId", r.URL.Query(), &params.AppointmentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "appointmentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAppointmentReservations(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ReserveAppointmentResources operation middleware
func (siw *ServerInterfaceWrapper) ReserveAppointmentResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "appointmentId" -------------
	var appointmentId AppointmentId

	err = runtime.BindStyledParameterWithOptions("simple", "appointmentId", chi.URLParam(r, "appointmentId"), &appointmentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "appointmentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReserveAppointmentResources(w, r, appointmentId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourceById operation middleware
func (siw *ServerInterfaceWrapper) GetResourceById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "resourceId" -------------
	var resourceId ResourceId

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", chi.URLParam(r, "resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourceById(w, r, resourceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/resources", wrapper.CreateResource)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/resources/available", wrapper.GetAvailableResources)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/resources/reservations", wrapper.DeleteAppointmentReservations)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/resources/reserve/{appointmentId}", wrapper.ReserveAppointmentResources)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/resources/{resourceId}", wrapper.GetResourceById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RYTW/bOBP+KwTfF9gEq1rubopFfXObtPAhbeGkpyIHhhzZbCVSIalktYb/+4KkPihL",
	"dpXU2RxtkTPPzDOf3GAqs1wKEEbj2QbnRJEMDCj3i+S55MJkIMyC2T8YaKp4brgUeIav14AKwe8KQJyB",
	"MDzhoNDJ16+L81MkE2TWgAIRKCM/uFi5vxVoUPfECprgCHMrLidmjSMsSAZ4tqM7wgruCq6A4ZlRBURY",
	"0zVkxIJKpMqIwTNcFNyeNGVuBWijuFjh7TbCjBh4ZbiVu/G67gpQZausPTBKUXi8r02BloWi8BSXEVTf",
	"RgwSLvgBDwV6fsU9HnEuhQZH+kIYUIKkV6DuQV0oJdWy+m4/UykMCFOFR8qpIzHOlbxNIfv9u7Z2bjD8",
	"TbI8rW4wq5BXcifaCZ6AlYwjzMAQnuIZngtUiB9CPgjkjyB3BElKC2VNi7A2xBQaz95MpxE23FgFDeDO",
	"LbwNffB/BQme4f/FbbTH/quOnYXnHoTzRpexudiBMUFXAEjnQHnCKfKQkDUSJVIhb46euFCodFgI83vC",
	"U3KbwrKizeebkjkow/0vy2GeVd7lBjL9U/DNjW3DLFGKlPZ3QihPeS18lLwP/ko5JC4DxikXMFrYZX2h",
	"J2wbBuy3EGgUOCFQedNIkLffgTpzL0JvdR3J2YjIrxNpM5jDLTp31x0dRBGEj80JxlzOkvRLgMjnZDew",
	"rgwRjCjG/wFWhVgVO+hk+eE9env25q9Tm/pd03w2bfrGsAZD71OdNoFLuPNvddKm5gpczlRJ9TOf+GOR",
	"R9MoaEAMOaoJrZdk6zKI4RcD8Qke6iLQ7xBLyG1zFEYjggQ8DDUEZCS6BUQVEAOsHyN7QNZQDmdtDe3a",
	"nt01zEmu5AyZNtKuPU1uDCMKCPss0rJOqrEMHcH4ltURHriutIEoMnu5KWVNXS47xe5msDNzkUgrJeUU",
	"qgZcdf/LxTWOcKFs51wbk+tZHMschNc+kWoVV5d0bM+2ud1ARLbFcwpo/mWBI3wPSnuuXk+mk6m9YQWS",
	"nOMZ/nMynZxZiohZO3Zi1eljUrsybPlzA4EdfvB7F6BNTHhvgjbvJCsPzBL1DDGuf4fZNNC/P4Up1Mmb",
	"3tS0Own9MX19NJSHIHo3saGssCS8mU73SW/gxoemNjeJFFlGVNloGywrJ3OWcXFqw5ustI3adli5sVJa",
	"0mNSzzMW2woG2P8IZmDoiTo7xrdhu9ojcTtrb296/EyPxs8A0gGmrgpKQeukSNMSKTCKwz0w1Pii8ap2",
	"s6DddKpBERiyRiCdSjN5BlY/gtkLg7SqR1EbLGfaF/IUDPQJPnf/z9tFbRle7BE9tHgdb8vrB8fZUBNq",
	"ASJvFkM6IPU5qPFu0uHOW/NCiaCQpsCsYLoGVqQ2nIKd+aTWc/oI6iDedBy73V+ivUd2SHxiqnbJ9Iw8",
	"rd7vrEWCjV2/2+27u/M8adY7zsCwd1LY3a+0Ico86p2h1eTvRs5VoQ/6evtFLUiKZgPhgqYFc681tnQQ",
	"EXSnxbke0ToHsm+nerrAYwMlM4gjl49nXtjIl4ejbP1XMgta5APR4jeDElkI5gG9/a8BvZciSTk16BX6",
	"LABJhTKpwkJPFKBCtF35+HWsKhV6t7uIXylYm/YVa3tokqglvCtdn3hcYQpeyp51iDg05C0H5q32rehF",
	"gnwIkpBVnD/XkDI0d96WaHG+L1ysBCfZU73HhHqVuRDMxWKzG8WO8kpysz0FU97N9t8AAAD//0jM+oMF",
	"FwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
