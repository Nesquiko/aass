// Package presapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package presapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AppointmentStatus.
const (
	Cancelled AppointmentStatus = "cancelled"
	Completed AppointmentStatus = "completed"
	Denied    AppointmentStatus = "denied"
	Requested AppointmentStatus = "requested"
	Scheduled AppointmentStatus = "scheduled"
)

// Defines values for AppointmentType.
const (
	RegularCheck AppointmentType = "regular_check"
)

// AppointmentDisplay Represents an appointment view relevant to a prescription.
type AppointmentDisplay struct {
	AppointmentDateTime time.Time          `json:"appointmentDateTime"`
	DoctorName          string             `json:"doctorName"`
	Id                  openapi_types.UUID `json:"id"`
	PatientName         string             `json:"patientName"`
	Status              AppointmentStatus  `json:"status"`
	Type                AppointmentType    `json:"type"`
}

// AppointmentStatus defines model for AppointmentStatus.
type AppointmentStatus string

// AppointmentType defines model for AppointmentType.
type AppointmentType string

// ErrorDetail Standardized error details (RFC 9457).
type ErrorDetail struct {
	Code                 string                 `json:"code"`
	Detail               string                 `json:"detail"`
	Status               int                    `json:"status"`
	Title                string                 `json:"title"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NewPrescription defines model for NewPrescription.
type NewPrescription struct {
	AppointmentId *openapi_types.UUID `json:"appointmentId,omitempty"`
	DoctorsNote   *string             `json:"doctorsNote,omitempty"`
	End           time.Time           `json:"end"`
	Name          string              `json:"name"`
	PatientId     openapi_types.UUID  `json:"patientId"`
	Start         time.Time           `json:"start"`
}

// Prescription defines model for Prescription.
type Prescription struct {
	// Appointment Represents an appointment view relevant to a prescription.
	Appointment   *AppointmentDisplay `json:"appointment,omitempty"`
	AppointmentId *openapi_types.UUID `json:"appointmentId,omitempty"`
	DoctorsNote   *string             `json:"doctorsNote,omitempty"`
	End           time.Time           `json:"end"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	Name          string              `json:"name"`
	Start         time.Time           `json:"start"`
}

// PrescriptionDisplay Basic info about a patient's prescription.
type PrescriptionDisplay struct {
	AppointmentId *openapi_types.UUID `json:"appointmentId,omitempty"`
	End           time.Time           `json:"end"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	Name          string              `json:"name"`
	Start         time.Time           `json:"start"`
}

// UpdatePrescription defines model for UpdatePrescription.
type UpdatePrescription struct {
	DoctorsNote *string    `json:"doctorsNote,omitempty"`
	End         *time.Time `json:"end,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Start       *time.Time `json:"start,omitempty"`
}

// PathPrescriptionId defines model for pathPrescriptionId.
type PathPrescriptionId = openapi_types.UUID

// QueryFrom defines model for queryFrom.
type QueryFrom = openapi_types.Date

// QueryPatientId defines model for queryPatientId.
type QueryPatientId = openapi_types.UUID

// QueryTo defines model for queryTo.
type QueryTo = openapi_types.Date

// InternalServerErrorResponse Standardized error details (RFC 9457).
type InternalServerErrorResponse = ErrorDetail

// Prescriptions defines model for Prescriptions.
type Prescriptions struct {
	Prescriptions []PrescriptionDisplay `json:"prescriptions"`
}

// GetPrescriptionsByPatientAndRangeParams defines parameters for GetPrescriptionsByPatientAndRange.
type GetPrescriptionsByPatientAndRangeParams struct {
	// PatientId The unique identifier (UUID) of the patient.
	PatientId QueryPatientId `form:"patientId" json:"patientId"`

	// From The start date (inclusive) for the query range (YYYY-MM-DD format).
	From QueryFrom `form:"from" json:"from"`

	// To The end date (inclusive) for the query range (YYYY-MM-DD format).
	To QueryTo `form:"to" json:"to"`
}

// CreatePrescriptionJSONRequestBody defines body for CreatePrescription for application/json ContentType.
type CreatePrescriptionJSONRequestBody = NewPrescription

// UpdatePrescriptionJSONRequestBody defines body for UpdatePrescription for application/json ContentType.
type UpdatePrescriptionJSONRequestBody = UpdatePrescription

// Getter for additional properties for ErrorDetail. Returns the specified
// element and whether it was found
func (a ErrorDetail) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail
func (a *ErrorDetail) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a *ErrorDetail) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["code"]; found {
		err = json.Unmarshal(raw, &a.Code)
		if err != nil {
			return fmt.Errorf("error reading 'code': %w", err)
		}
		delete(object, "code")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a ErrorDetail) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["code"], err = json.Marshal(a.Code)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'code': %w", err)
	}

	object["detail"], err = json.Marshal(a.Detail)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'detail': %w", err)
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	object["title"], err = json.Marshal(a.Title)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'title': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetPrescriptionsByPatientAndRange request
	GetPrescriptionsByPatientAndRange(ctx context.Context, params *GetPrescriptionsByPatientAndRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePrescriptionWithBody request with any body
	CreatePrescriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePrescription(ctx context.Context, body CreatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePrescription request
	DeletePrescription(ctx context.Context, prescriptionId PathPrescriptionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PrescriptionDetail request
	PrescriptionDetail(ctx context.Context, prescriptionId PathPrescriptionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePrescriptionWithBody request with any body
	UpdatePrescriptionWithBody(ctx context.Context, prescriptionId PathPrescriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePrescription(ctx context.Context, prescriptionId PathPrescriptionId, body UpdatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetPrescriptionsByPatientAndRange(ctx context.Context, params *GetPrescriptionsByPatientAndRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPrescriptionsByPatientAndRangeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePrescriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePrescriptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePrescription(ctx context.Context, body CreatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePrescriptionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePrescription(ctx context.Context, prescriptionId PathPrescriptionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePrescriptionRequest(c.Server, prescriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PrescriptionDetail(ctx context.Context, prescriptionId PathPrescriptionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPrescriptionDetailRequest(c.Server, prescriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePrescriptionWithBody(ctx context.Context, prescriptionId PathPrescriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePrescriptionRequestWithBody(c.Server, prescriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePrescription(ctx context.Context, prescriptionId PathPrescriptionId, body UpdatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePrescriptionRequest(c.Server, prescriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetPrescriptionsByPatientAndRangeRequest generates requests for GetPrescriptionsByPatientAndRange
func NewGetPrescriptionsByPatientAndRangeRequest(server string, params *GetPrescriptionsByPatientAndRangeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prescriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "patientId", runtime.ParamLocationQuery, params.PatientId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePrescriptionRequest calls the generic CreatePrescription builder with application/json body
func NewCreatePrescriptionRequest(server string, body CreatePrescriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePrescriptionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePrescriptionRequestWithBody generates requests for CreatePrescription with any type of body
func NewCreatePrescriptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prescriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePrescriptionRequest generates requests for DeletePrescription
func NewDeletePrescriptionRequest(server string, prescriptionId PathPrescriptionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prescriptionId", runtime.ParamLocationPath, prescriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prescriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPrescriptionDetailRequest generates requests for PrescriptionDetail
func NewPrescriptionDetailRequest(server string, prescriptionId PathPrescriptionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prescriptionId", runtime.ParamLocationPath, prescriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prescriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePrescriptionRequest calls the generic UpdatePrescription builder with application/json body
func NewUpdatePrescriptionRequest(server string, prescriptionId PathPrescriptionId, body UpdatePrescriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePrescriptionRequestWithBody(server, prescriptionId, "application/json", bodyReader)
}

// NewUpdatePrescriptionRequestWithBody generates requests for UpdatePrescription with any type of body
func NewUpdatePrescriptionRequestWithBody(server string, prescriptionId PathPrescriptionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prescriptionId", runtime.ParamLocationPath, prescriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prescriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetPrescriptionsByPatientAndRangeWithResponse request
	GetPrescriptionsByPatientAndRangeWithResponse(ctx context.Context, params *GetPrescriptionsByPatientAndRangeParams, reqEditors ...RequestEditorFn) (*GetPrescriptionsByPatientAndRangeResponse, error)

	// CreatePrescriptionWithBodyWithResponse request with any body
	CreatePrescriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePrescriptionResponse, error)

	CreatePrescriptionWithResponse(ctx context.Context, body CreatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePrescriptionResponse, error)

	// DeletePrescriptionWithResponse request
	DeletePrescriptionWithResponse(ctx context.Context, prescriptionId PathPrescriptionId, reqEditors ...RequestEditorFn) (*DeletePrescriptionResponse, error)

	// PrescriptionDetailWithResponse request
	PrescriptionDetailWithResponse(ctx context.Context, prescriptionId PathPrescriptionId, reqEditors ...RequestEditorFn) (*PrescriptionDetailResponse, error)

	// UpdatePrescriptionWithBodyWithResponse request with any body
	UpdatePrescriptionWithBodyWithResponse(ctx context.Context, prescriptionId PathPrescriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePrescriptionResponse, error)

	UpdatePrescriptionWithResponse(ctx context.Context, prescriptionId PathPrescriptionId, body UpdatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePrescriptionResponse, error)
}

type GetPrescriptionsByPatientAndRangeResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Prescriptions
	ApplicationproblemJSON400 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPrescriptionsByPatientAndRangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPrescriptionsByPatientAndRangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePrescriptionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *Prescription
	ApplicationproblemJSON400 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePrescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePrescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePrescriptionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON404 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePrescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePrescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PrescriptionDetailResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Prescription
	ApplicationproblemJSON404 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r PrescriptionDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PrescriptionDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePrescriptionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Prescription
	ApplicationproblemJSON400 *ErrorDetail
	ApplicationproblemJSON404 *ErrorDetail
	ApplicationproblemJSON500 *InternalServerErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdatePrescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePrescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetPrescriptionsByPatientAndRangeWithResponse request returning *GetPrescriptionsByPatientAndRangeResponse
func (c *ClientWithResponses) GetPrescriptionsByPatientAndRangeWithResponse(ctx context.Context, params *GetPrescriptionsByPatientAndRangeParams, reqEditors ...RequestEditorFn) (*GetPrescriptionsByPatientAndRangeResponse, error) {
	rsp, err := c.GetPrescriptionsByPatientAndRange(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPrescriptionsByPatientAndRangeResponse(rsp)
}

// CreatePrescriptionWithBodyWithResponse request with arbitrary body returning *CreatePrescriptionResponse
func (c *ClientWithResponses) CreatePrescriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePrescriptionResponse, error) {
	rsp, err := c.CreatePrescriptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePrescriptionResponse(rsp)
}

func (c *ClientWithResponses) CreatePrescriptionWithResponse(ctx context.Context, body CreatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePrescriptionResponse, error) {
	rsp, err := c.CreatePrescription(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePrescriptionResponse(rsp)
}

// DeletePrescriptionWithResponse request returning *DeletePrescriptionResponse
func (c *ClientWithResponses) DeletePrescriptionWithResponse(ctx context.Context, prescriptionId PathPrescriptionId, reqEditors ...RequestEditorFn) (*DeletePrescriptionResponse, error) {
	rsp, err := c.DeletePrescription(ctx, prescriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePrescriptionResponse(rsp)
}

// PrescriptionDetailWithResponse request returning *PrescriptionDetailResponse
func (c *ClientWithResponses) PrescriptionDetailWithResponse(ctx context.Context, prescriptionId PathPrescriptionId, reqEditors ...RequestEditorFn) (*PrescriptionDetailResponse, error) {
	rsp, err := c.PrescriptionDetail(ctx, prescriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePrescriptionDetailResponse(rsp)
}

// UpdatePrescriptionWithBodyWithResponse request with arbitrary body returning *UpdatePrescriptionResponse
func (c *ClientWithResponses) UpdatePrescriptionWithBodyWithResponse(ctx context.Context, prescriptionId PathPrescriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePrescriptionResponse, error) {
	rsp, err := c.UpdatePrescriptionWithBody(ctx, prescriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePrescriptionResponse(rsp)
}

func (c *ClientWithResponses) UpdatePrescriptionWithResponse(ctx context.Context, prescriptionId PathPrescriptionId, body UpdatePrescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePrescriptionResponse, error) {
	rsp, err := c.UpdatePrescription(ctx, prescriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePrescriptionResponse(rsp)
}

// ParseGetPrescriptionsByPatientAndRangeResponse parses an HTTP response from a GetPrescriptionsByPatientAndRangeWithResponse call
func ParseGetPrescriptionsByPatientAndRangeResponse(rsp *http.Response) (*GetPrescriptionsByPatientAndRangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPrescriptionsByPatientAndRangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Prescriptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreatePrescriptionResponse parses an HTTP response from a CreatePrescriptionWithResponse call
func ParseCreatePrescriptionResponse(rsp *http.Response) (*CreatePrescriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePrescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Prescription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeletePrescriptionResponse parses an HTTP response from a DeletePrescriptionWithResponse call
func ParseDeletePrescriptionResponse(rsp *http.Response) (*DeletePrescriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePrescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePrescriptionDetailResponse parses an HTTP response from a PrescriptionDetailWithResponse call
func ParsePrescriptionDetailResponse(rsp *http.Response) (*PrescriptionDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PrescriptionDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Prescription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePrescriptionResponse parses an HTTP response from a UpdatePrescriptionWithResponse call
func ParseUpdatePrescriptionResponse(rsp *http.Response) (*UpdatePrescriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePrescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Prescription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}
