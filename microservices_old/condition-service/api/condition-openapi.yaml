openapi: 3.0.4
info:
  title: Condition Service API
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - description: Condition Service Endpoint
    url: /
tags:
  - name: Conditions
paths:
  /conditions: # Corresponds to /api/conditions
    post:
      tags:
        - Conditions
      summary: Create a condition record for a patient
      operationId: createPatientCondition
      requestBody:
        description: Details of the condition to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCondition"
      responses:
        "201":
          description: Condition record created successfully. Returns the created condition details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConditionDisplay"
        "400": # Added Bad Request for invalid input
          description: Bad Request - Invalid input data.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
    # <<< NEW GET ENDPOINT ADDED HERE >>>
    get:
      tags:
        - Conditions
      summary: Get conditions by patient and date range
      description: Retrieves a list of conditions for a specific patient that were active at any point within the specified date range (inclusive).
      operationId: getConditionsByPatientAndRange
      parameters:
        - $ref: "#/components/parameters/queryPatientId" # Use query param version
        - $ref: "#/components/parameters/queryFrom" # Use query param version
        - $ref: "#/components/parameters/queryTo" # Use query param version
      responses:
        "200":
          $ref: "#/components/responses/Conditions" # Returns list of ConditionDisplay
        "400": # Added Bad Request for missing/invalid params
          description: Bad Request - Missing required parameters or invalid date format.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
              examples:
                missingParam:
                  summary: Example missing parameter
                  value:
                    title: Bad Request
                    status: 400
                    code: request.missing-parameter
                    detail: "Required query parameter 'patientId' is missing."
                invalidDateFormat:
                  summary: Example invalid date format
                  value:
                    title: Bad Request
                    status: 400
                    code: request.invalid-parameter
                    detail: "Invalid format for parameter 'from'. Expected YYYY-MM-DD."
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /conditions/{conditionId}: # Corresponds to /api/conditions/{conditionId}
    get:
      tags:
        - Conditions
      summary: Condition detail
      operationId: conditionDetail
      parameters:
        - $ref: "#/components/parameters/pathConditionId" # Renamed for clarity
      responses:
        "200":
          description: Condition details, potentially including linked appointments.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Condition" # Includes AppointmentDisplay array
        "404":
          description: Condition not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
              examples: # Added example
                conditionNotFound:
                  summary: Example condition not found
                  value:
                    title: Resource Not Found
                    status: 404
                    code: condition.not-found
                    detail: Condition with ID a1b2c3d4-e5f6-7890-1234-567890abcdef not found.
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
    patch:
      tags:
        - Conditions
      summary: Update a condition
      operationId: updateCondition
      parameters:
        - $ref: "#/components/parameters/pathConditionId" # Renamed for clarity
      requestBody:
        description: Updated condition fields
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCondition"
      responses:
        "200":
          description: Condition details after update.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Condition"
        "400": # Added Bad Request for invalid input
          description: Bad Request - Invalid input data for update.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "404":
          description: Condition not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
              examples: # Added example
                conditionNotFoundForUpdate:
                  summary: Example condition not found for update
                  value:
                    title: Resource Not Found
                    status: 404
                    code: condition.not-found
                    detail: Condition with ID a1b2c3d4-e5f6-7890-1234-567890abcdef not found.
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /conditions/patient/{patientId}: # Corresponds to /api/conditions/patient/{patientId}
    get:
      tags:
        - Conditions
      summary: Get patient's conditions active on a specific date
      operationId: conditionsInDate
      parameters:
        - $ref: "#/components/parameters/pathPatientId" # Renamed for clarity
        - $ref: "#/components/parameters/queryDate" # Renamed for clarity
      responses:
        "200":
          $ref: "#/components/responses/Conditions" # Returns list of ConditionDisplay
        "400": # Added Bad Request for invalid date format
          description: Bad Request - Invalid date format.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

components:
  schemas:
    # --- Schemas remain the same ---
    ConditionDisplay: # Core display model
      type: object
      description: Basic info about a patient's condition.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
          nullable: true # Explicitly allow null for end date
        appointmentsIds: # Optional: IDs of linked appointments
          type: array
          items:
            type: string
            format: uuid
      required:
        - id
        - name
        - start
    NewCondition: # Input for creation
      type: object
      required: # Added required fields based on ConditionDisplay usage
        - patientId
        - name
        - start
      properties:
        patientId:
          type: string
          format: uuid
        name:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
          nullable: true
        appointmentsIds: # Allow setting initial linked appointments? Maybe not needed on create.
          type: array
          items:
            type: string
            format: uuid
    AppointmentStatus: # Needed for AppointmentDisplay
      type: string
      enum:
        - requested
        - cancelled
        - scheduled
        - completed
        - denied
    AppointmentType: # Needed for AppointmentDisplay
      type: string
      enum:
        - regular_check
    AppointmentDisplay: # Needed for Condition schema (if enriching)
      type: object
      description: Represents an appointment view relevant to a condition.
      properties:
        id:
          type: string
          format: uuid
        appointmentDateTime:
          type: string
          format: date-time
        doctorName:
          type: string
        patientName:
          type: string
        status:
          $ref: "#/components/schemas/AppointmentStatus"
        type:
          $ref: "#/components/schemas/AppointmentType"
      required:
        - id
        - appointmentDateTime
        - doctorName
        - patientName
        - status
        - type
    Condition: # Full detail model
      allOf:
        - $ref: "#/components/schemas/ConditionDisplay"
        - type: object
          properties:
            appointments: # Assuming enrichment happens here
              type: array
              items:
                $ref: "#/components/schemas/AppointmentDisplay"
          # Decide if appointments array is always required or can be empty
          # required:
          #   - appointments
    UpdateCondition: # Input for update
      type: object
      # Removed 'required: [end]' - allow updating name/start without necessarily ending it
      properties:
        name:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
          nullable: true # Allow setting end date to null (re-opening?) or a specific date
        # patientId: # Usually not updatable
        #   type: string
        #   format: uuid
        appointmentsIds: # Allow updating linked appointments?
          type: array
          items:
            type: string
            format: uuid
    ErrorDetail: # Shared Error Schema
      type: object
      description: Standardized error details (RFC 9457).
      properties:
        title:
          type: string
        code:
          type: string
        status:
          type: integer
        detail:
          type: string
      additionalProperties: true
      required:
        - title
        - code
        - status
        - detail

  parameters:
    # --- Renamed path parameters for clarity ---
    pathConditionId:
      name: conditionId
      in: path
      required: true
      description: The unique identifier (UUID) of a condition.
      schema:
        type: string
        format: uuid
      example: a1b2c3d4-e5f6-7890-1234-567890abcdef
    pathPatientId:
      name: patientId
      in: path
      required: true
      description: The unique identifier (UUID) of the patient.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479

    # --- Renamed/Defined query parameters ---
    queryDate:
      name: date
      in: query
      required: true
      description: The specific day (YYYY-MM-DD format).
      schema:
        type: string
        format: date
      example: "2024-07-15"
    queryPatientId: # New query parameter for patientId
      name: patientId
      in: query
      required: true
      description: The unique identifier (UUID) of the patient.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    queryFrom: # New query parameter for start date
      name: from
      in: query
      required: true
      description: The start date (inclusive) for the query range (YYYY-MM-DD format).
      schema:
        type: string
        format: date
      example: "2024-07-01"
    queryTo: # New query parameter for end date
      name: to
      in: query
      required: true
      description: The end date (inclusive) for the query range (YYYY-MM-DD format).
      schema:
        type: string
        format: date
      example: "2024-07-31"

  responses:
    InternalServerErrorResponse:
      description: An error occurred. See specific status code for details.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorDetail"
          example:
            title: Internal Server Error
            status: 500
            code: internal.server.error
            detail: An unknown server error occurred
    Conditions:
      description: Successfully retrieved list of conditions.
      content:
        application/json:
          schema:
            type: object
            required:
              - conditions
            properties:
              conditions:
                type: array
                items:
                  $ref: "#/components/schemas/ConditionDisplay"
