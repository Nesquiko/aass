// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/nullable"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AppointmentStatus.
const (
	Cancelled AppointmentStatus = "cancelled"
	Completed AppointmentStatus = "completed"
	Denied    AppointmentStatus = "denied"
	Requested AppointmentStatus = "requested"
	Scheduled AppointmentStatus = "scheduled"
)

// Defines values for AppointmentType.
const (
	RegularCheck AppointmentType = "regular_check"
)

// AppointmentDisplay Represents an appointment view relevant to a condition.
type AppointmentDisplay struct {
	AppointmentDateTime time.Time          `json:"appointmentDateTime"`
	DoctorName          string             `json:"doctorName"`
	Id                  openapi_types.UUID `json:"id"`
	PatientName         string             `json:"patientName"`
	Status              AppointmentStatus  `json:"status"`
	Type                AppointmentType    `json:"type"`
}

// AppointmentStatus defines model for AppointmentStatus.
type AppointmentStatus string

// AppointmentType defines model for AppointmentType.
type AppointmentType string

// Condition defines model for Condition.
type Condition struct {
	Appointments    *[]AppointmentDisplay        `json:"appointments,omitempty"`
	AppointmentsIds *[]openapi_types.UUID        `json:"appointmentsIds,omitempty"`
	End             nullable.Nullable[time.Time] `json:"end,omitempty"`
	Id              *openapi_types.UUID          `json:"id,omitempty"`
	Name            string                       `json:"name"`
	Start           time.Time                    `json:"start"`
}

// ConditionDisplay Basic info about a patient's condition.
type ConditionDisplay struct {
	AppointmentsIds *[]openapi_types.UUID        `json:"appointmentsIds,omitempty"`
	End             nullable.Nullable[time.Time] `json:"end,omitempty"`
	Id              *openapi_types.UUID          `json:"id,omitempty"`
	Name            string                       `json:"name"`
	Start           time.Time                    `json:"start"`
}

// ErrorDetail Standardized error details (RFC 9457).
type ErrorDetail struct {
	Code                 string                 `json:"code"`
	Detail               string                 `json:"detail"`
	Status               int                    `json:"status"`
	Title                string                 `json:"title"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NewCondition defines model for NewCondition.
type NewCondition struct {
	AppointmentsIds *[]openapi_types.UUID        `json:"appointmentsIds,omitempty"`
	End             nullable.Nullable[time.Time] `json:"end,omitempty"`
	Name            string                       `json:"name"`
	PatientId       openapi_types.UUID           `json:"patientId"`
	Start           time.Time                    `json:"start"`
}

// UpdateCondition defines model for UpdateCondition.
type UpdateCondition struct {
	AppointmentsIds *[]openapi_types.UUID        `json:"appointmentsIds,omitempty"`
	End             nullable.Nullable[time.Time] `json:"end,omitempty"`
	Name            *string                      `json:"name,omitempty"`
	Start           *time.Time                   `json:"start,omitempty"`
}

// PathConditionId defines model for pathConditionId.
type PathConditionId = openapi_types.UUID

// PathPatientId defines model for pathPatientId.
type PathPatientId = openapi_types.UUID

// QueryDate defines model for queryDate.
type QueryDate = openapi_types.Date

// QueryFrom defines model for queryFrom.
type QueryFrom = openapi_types.Date

// QueryPatientId defines model for queryPatientId.
type QueryPatientId = openapi_types.UUID

// QueryTo defines model for queryTo.
type QueryTo = openapi_types.Date

// Conditions defines model for Conditions.
type Conditions struct {
	Conditions []ConditionDisplay `json:"conditions"`
}

// InternalServerErrorResponse Standardized error details (RFC 9457).
type InternalServerErrorResponse = ErrorDetail

// GetConditionsByPatientAndRangeParams defines parameters for GetConditionsByPatientAndRange.
type GetConditionsByPatientAndRangeParams struct {
	// PatientId The unique identifier (UUID) of the patient.
	PatientId QueryPatientId `form:"patientId" json:"patientId"`

	// From The start date (inclusive) for the query range (YYYY-MM-DD format).
	From QueryFrom `form:"from" json:"from"`

	// To The end date (inclusive) for the query range (YYYY-MM-DD format).
	To QueryTo `form:"to" json:"to"`
}

// ConditionsInDateParams defines parameters for ConditionsInDate.
type ConditionsInDateParams struct {
	// Date The specific day (YYYY-MM-DD format).
	Date QueryDate `form:"date" json:"date"`
}

// CreatePatientConditionJSONRequestBody defines body for CreatePatientCondition for application/json ContentType.
type CreatePatientConditionJSONRequestBody = NewCondition

// UpdateConditionJSONRequestBody defines body for UpdateCondition for application/json ContentType.
type UpdateConditionJSONRequestBody = UpdateCondition

// Getter for additional properties for ErrorDetail. Returns the specified
// element and whether it was found
func (a ErrorDetail) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail
func (a *ErrorDetail) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a *ErrorDetail) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["code"]; found {
		err = json.Unmarshal(raw, &a.Code)
		if err != nil {
			return fmt.Errorf("error reading 'code': %w", err)
		}
		delete(object, "code")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a ErrorDetail) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["code"], err = json.Marshal(a.Code)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'code': %w", err)
	}

	object["detail"], err = json.Marshal(a.Detail)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'detail': %w", err)
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	object["title"], err = json.Marshal(a.Title)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'title': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get conditions by patient and date range
	// (GET /conditions)
	GetConditionsByPatientAndRange(w http.ResponseWriter, r *http.Request, params GetConditionsByPatientAndRangeParams)
	// Create a condition record for a patient
	// (POST /conditions)
	CreatePatientCondition(w http.ResponseWriter, r *http.Request)
	// Get patient's conditions active on a specific date
	// (GET /conditions/patient/{patientId})
	ConditionsInDate(w http.ResponseWriter, r *http.Request, patientId PathPatientId, params ConditionsInDateParams)
	// Condition detail
	// (GET /conditions/{conditionId})
	ConditionDetail(w http.ResponseWriter, r *http.Request, conditionId PathConditionId)
	// Update a condition
	// (PATCH /conditions/{conditionId})
	UpdateCondition(w http.ResponseWriter, r *http.Request, conditionId PathConditionId)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get conditions by patient and date range
// (GET /conditions)
func (_ Unimplemented) GetConditionsByPatientAndRange(w http.ResponseWriter, r *http.Request, params GetConditionsByPatientAndRangeParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a condition record for a patient
// (POST /conditions)
func (_ Unimplemented) CreatePatientCondition(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get patient's conditions active on a specific date
// (GET /conditions/patient/{patientId})
func (_ Unimplemented) ConditionsInDate(w http.ResponseWriter, r *http.Request, patientId PathPatientId, params ConditionsInDateParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Condition detail
// (GET /conditions/{conditionId})
func (_ Unimplemented) ConditionDetail(w http.ResponseWriter, r *http.Request, conditionId PathConditionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a condition
// (PATCH /conditions/{conditionId})
func (_ Unimplemented) UpdateCondition(w http.ResponseWriter, r *http.Request, conditionId PathConditionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetConditionsByPatientAndRange operation middleware
func (siw *ServerInterfaceWrapper) GetConditionsByPatientAndRange(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConditionsByPatientAndRangeParams

	// ------------- Required query parameter "patientId" -------------

	if paramValue := r.URL.Query().Get("patientId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "patientId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "patientId", r.URL.Query(), &params.PatientId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "patientId", Err: err})
		return
	}

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Required query parameter "to" -------------

	if paramValue := r.URL.Query().Get("to"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "to"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConditionsByPatientAndRange(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePatientCondition operation middleware
func (siw *ServerInterfaceWrapper) CreatePatientCondition(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePatientCondition(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ConditionsInDate operation middleware
func (siw *ServerInterfaceWrapper) ConditionsInDate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "patientId" -------------
	var patientId PathPatientId

	err = runtime.BindStyledParameterWithOptions("simple", "patientId", chi.URLParam(r, "patientId"), &patientId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "patientId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ConditionsInDateParams

	// ------------- Required query parameter "date" -------------

	if paramValue := r.URL.Query().Get("date"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "date"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date", r.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConditionsInDate(w, r, patientId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ConditionDetail operation middleware
func (siw *ServerInterfaceWrapper) ConditionDetail(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "conditionId" -------------
	var conditionId PathConditionId

	err = runtime.BindStyledParameterWithOptions("simple", "conditionId", chi.URLParam(r, "conditionId"), &conditionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "conditionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConditionDetail(w, r, conditionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateCondition operation middleware
func (siw *ServerInterfaceWrapper) UpdateCondition(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "conditionId" -------------
	var conditionId PathConditionId

	err = runtime.BindStyledParameterWithOptions("simple", "conditionId", chi.URLParam(r, "conditionId"), &conditionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "conditionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCondition(w, r, conditionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/conditions", wrapper.GetConditionsByPatientAndRange)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/conditions", wrapper.CreatePatientCondition)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/conditions/patient/{patientId}", wrapper.ConditionsInDate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/conditions/{conditionId}", wrapper.ConditionDetail)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/conditions/{conditionId}", wrapper.UpdateCondition)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
