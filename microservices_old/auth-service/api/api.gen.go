// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for SpecializationEnum.
const (
	Cardiologist        SpecializationEnum = "cardiologist"
	Dermatologist       SpecializationEnum = "dermatologist"
	Diagnostician       SpecializationEnum = "diagnostician"
	Endocrinologist     SpecializationEnum = "endocrinologist"
	Gastroenterologist  SpecializationEnum = "gastroenterologist"
	GeneralPractitioner SpecializationEnum = "general_practitioner"
	Neurologist         SpecializationEnum = "neurologist"
	Oncologist          SpecializationEnum = "oncologist"
	Orthopedist         SpecializationEnum = "orthopedist"
	Other               SpecializationEnum = "other"
	Pediatrician        SpecializationEnum = "pediatrician"
	Psychiatrist        SpecializationEnum = "psychiatrist"
	Radiologist         SpecializationEnum = "radiologist"
	Surgeon             SpecializationEnum = "surgeon"
	Urologist           SpecializationEnum = "urologist"
)

// Defines values for UserRole.
const (
	UserRoleDoctor  UserRole = "doctor"
	UserRolePatient UserRole = "patient"
)

// Doctor defines model for Doctor.
type Doctor struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        openapi_types.UUID  `json:"id"`
	LastName  string              `json:"lastName"`
	Role      UserRole            `json:"role"`

	// Specialization Medical specialization of a doctor.
	Specialization SpecializationEnum `json:"specialization"`
}

// DoctorRegistration defines model for DoctorRegistration.
type DoctorRegistration struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
	Role      UserRole            `json:"role"`

	// Specialization Medical specialization of a doctor.
	Specialization SpecializationEnum `json:"specialization"`
}

// ErrorDetail Standardized error details (RFC 9457).
type ErrorDetail struct {
	Code                 string                 `json:"code"`
	Detail               string                 `json:"detail"`
	Status               int                    `json:"status"`
	Title                string                 `json:"title"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Patient defines model for Patient.
type Patient struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        openapi_types.UUID  `json:"id"`
	LastName  string              `json:"lastName"`
	Role      UserRole            `json:"role"`
}

// PatientRegistration defines model for PatientRegistration.
type PatientRegistration struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
	Role      UserRole            `json:"role"`
}

// Registration defines model for Registration.
type Registration struct {
	union json.RawMessage
}

// SpecializationEnum Medical specialization of a doctor.
type SpecializationEnum string

// User defines model for User.
type User struct {
	union json.RawMessage
}

// UserRole defines model for UserRole.
type UserRole string

// InternalServerErrorResponse Standardized error details (RFC 9457).
type InternalServerErrorResponse = ErrorDetail

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody struct {
	// Email User's email address.
	Email openapi_types.Email `json:"email"`
	Role  UserRole            `json:"role"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody LoginUserJSONBody

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = Registration

// Getter for additional properties for ErrorDetail. Returns the specified
// element and whether it was found
func (a ErrorDetail) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail
func (a *ErrorDetail) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a *ErrorDetail) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["code"]; found {
		err = json.Unmarshal(raw, &a.Code)
		if err != nil {
			return fmt.Errorf("error reading 'code': %w", err)
		}
		delete(object, "code")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a ErrorDetail) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["code"], err = json.Marshal(a.Code)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'code': %w", err)
	}

	object["detail"], err = json.Marshal(a.Detail)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'detail': %w", err)
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	object["title"], err = json.Marshal(a.Title)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'title': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsPatientRegistration returns the union data inside the Registration as a PatientRegistration
func (t Registration) AsPatientRegistration() (PatientRegistration, error) {
	var body PatientRegistration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatientRegistration overwrites any union data inside the Registration as the provided PatientRegistration
func (t *Registration) FromPatientRegistration(v PatientRegistration) error {
	v.Role = "patient"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatientRegistration performs a merge with any union data inside the Registration, using the provided PatientRegistration
func (t *Registration) MergePatientRegistration(v PatientRegistration) error {
	v.Role = "patient"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDoctorRegistration returns the union data inside the Registration as a DoctorRegistration
func (t Registration) AsDoctorRegistration() (DoctorRegistration, error) {
	var body DoctorRegistration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDoctorRegistration overwrites any union data inside the Registration as the provided DoctorRegistration
func (t *Registration) FromDoctorRegistration(v DoctorRegistration) error {
	v.Role = "doctor"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDoctorRegistration performs a merge with any union data inside the Registration, using the provided DoctorRegistration
func (t *Registration) MergeDoctorRegistration(v DoctorRegistration) error {
	v.Role = "doctor"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Registration) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"role"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Registration) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "doctor":
		return t.AsDoctorRegistration()
	case "patient":
		return t.AsPatientRegistration()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Registration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Registration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatient returns the union data inside the User as a Patient
func (t User) AsPatient() (Patient, error) {
	var body Patient
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatient overwrites any union data inside the User as the provided Patient
func (t *User) FromPatient(v Patient) error {
	v.Role = "patient"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatient performs a merge with any union data inside the User, using the provided Patient
func (t *User) MergePatient(v Patient) error {
	v.Role = "patient"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDoctor returns the union data inside the User as a Doctor
func (t User) AsDoctor() (Doctor, error) {
	var body Doctor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDoctor overwrites any union data inside the User as the provided Doctor
func (t *User) FromDoctor(v Doctor) error {
	v.Role = "doctor"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDoctor performs a merge with any union data inside the User, using the provided Doctor
func (t *User) MergeDoctor(v Doctor) error {
	v.Role = "doctor"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t User) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"role"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t User) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "doctor":
		return t.AsDoctor()
	case "patient":
		return t.AsPatient()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t User) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *User) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User Login
	// (POST /login)
	LoginUser(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /register)
	RegisterUser(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// User Login
// (POST /login)
func (_ Unimplemented) LoginUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new user
// (POST /register)
func (_ Unimplemented) RegisterUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.LoginUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register", wrapper.RegisterUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vE0UAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
