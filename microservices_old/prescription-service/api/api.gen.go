// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AppointmentStatus.
const (
	Cancelled AppointmentStatus = "cancelled"
	Completed AppointmentStatus = "completed"
	Denied    AppointmentStatus = "denied"
	Requested AppointmentStatus = "requested"
	Scheduled AppointmentStatus = "scheduled"
)

// Defines values for AppointmentType.
const (
	RegularCheck AppointmentType = "regular_check"
)

// AppointmentDisplay Represents an appointment view relevant to a prescription.
type AppointmentDisplay struct {
	AppointmentDateTime time.Time          `json:"appointmentDateTime"`
	DoctorName          string             `json:"doctorName"`
	Id                  openapi_types.UUID `json:"id"`
	PatientName         string             `json:"patientName"`
	Status              AppointmentStatus  `json:"status"`
	Type                AppointmentType    `json:"type"`
}

// AppointmentStatus defines model for AppointmentStatus.
type AppointmentStatus string

// AppointmentType defines model for AppointmentType.
type AppointmentType string

// ErrorDetail Standardized error details (RFC 9457).
type ErrorDetail struct {
	Code                 string                 `json:"code"`
	Detail               string                 `json:"detail"`
	Status               int                    `json:"status"`
	Title                string                 `json:"title"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NewPrescription defines model for NewPrescription.
type NewPrescription struct {
	AppointmentId *openapi_types.UUID `json:"appointmentId,omitempty"`
	DoctorsNote   *string             `json:"doctorsNote,omitempty"`
	End           time.Time           `json:"end"`
	Name          string              `json:"name"`
	PatientId     openapi_types.UUID  `json:"patientId"`
	Start         time.Time           `json:"start"`
}

// Prescription defines model for Prescription.
type Prescription struct {
	// Appointment Represents an appointment view relevant to a prescription.
	Appointment   *AppointmentDisplay `json:"appointment,omitempty"`
	AppointmentId *openapi_types.UUID `json:"appointmentId,omitempty"`
	DoctorsNote   *string             `json:"doctorsNote,omitempty"`
	End           time.Time           `json:"end"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	Name          string              `json:"name"`
	Start         time.Time           `json:"start"`
}

// PrescriptionDisplay Basic info about a patient's prescription.
type PrescriptionDisplay struct {
	AppointmentId *openapi_types.UUID `json:"appointmentId,omitempty"`
	End           time.Time           `json:"end"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	Name          string              `json:"name"`
	Start         time.Time           `json:"start"`
}

// UpdatePrescription defines model for UpdatePrescription.
type UpdatePrescription struct {
	DoctorsNote *string    `json:"doctorsNote,omitempty"`
	End         *time.Time `json:"end,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Start       *time.Time `json:"start,omitempty"`
}

// PathPrescriptionId defines model for pathPrescriptionId.
type PathPrescriptionId = openapi_types.UUID

// QueryFrom defines model for queryFrom.
type QueryFrom = openapi_types.Date

// QueryPatientId defines model for queryPatientId.
type QueryPatientId = openapi_types.UUID

// QueryTo defines model for queryTo.
type QueryTo = openapi_types.Date

// InternalServerErrorResponse Standardized error details (RFC 9457).
type InternalServerErrorResponse = ErrorDetail

// Prescriptions defines model for Prescriptions.
type Prescriptions struct {
	Prescriptions []PrescriptionDisplay `json:"prescriptions"`
}

// GetPrescriptionsByPatientAndRangeParams defines parameters for GetPrescriptionsByPatientAndRange.
type GetPrescriptionsByPatientAndRangeParams struct {
	// PatientId The unique identifier (UUID) of the patient.
	PatientId QueryPatientId `form:"patientId" json:"patientId"`

	// From The start date (inclusive) for the query range (YYYY-MM-DD format).
	From QueryFrom `form:"from" json:"from"`

	// To The end date (inclusive) for the query range (YYYY-MM-DD format).
	To QueryTo `form:"to" json:"to"`
}

// CreatePrescriptionJSONRequestBody defines body for CreatePrescription for application/json ContentType.
type CreatePrescriptionJSONRequestBody = NewPrescription

// UpdatePrescriptionJSONRequestBody defines body for UpdatePrescription for application/json ContentType.
type UpdatePrescriptionJSONRequestBody = UpdatePrescription

// Getter for additional properties for ErrorDetail. Returns the specified
// element and whether it was found
func (a ErrorDetail) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail
func (a *ErrorDetail) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a *ErrorDetail) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["code"]; found {
		err = json.Unmarshal(raw, &a.Code)
		if err != nil {
			return fmt.Errorf("error reading 'code': %w", err)
		}
		delete(object, "code")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a ErrorDetail) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["code"], err = json.Marshal(a.Code)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'code': %w", err)
	}

	object["detail"], err = json.Marshal(a.Detail)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'detail': %w", err)
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	object["title"], err = json.Marshal(a.Title)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'title': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get prescriptions by patient and date range
	// (GET /prescriptions)
	GetPrescriptionsByPatientAndRange(w http.ResponseWriter, r *http.Request, params GetPrescriptionsByPatientAndRangeParams)
	// Create a prescription record for a patient
	// (POST /prescriptions)
	CreatePrescription(w http.ResponseWriter, r *http.Request)
	// Delete prescription
	// (DELETE /prescriptions/{prescriptionId})
	DeletePrescription(w http.ResponseWriter, r *http.Request, prescriptionId PathPrescriptionId)
	// Prescription detail
	// (GET /prescriptions/{prescriptionId})
	PrescriptionDetail(w http.ResponseWriter, r *http.Request, prescriptionId PathPrescriptionId)
	// Update prescription
	// (PATCH /prescriptions/{prescriptionId})
	UpdatePrescription(w http.ResponseWriter, r *http.Request, prescriptionId PathPrescriptionId)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get prescriptions by patient and date range
// (GET /prescriptions)
func (_ Unimplemented) GetPrescriptionsByPatientAndRange(w http.ResponseWriter, r *http.Request, params GetPrescriptionsByPatientAndRangeParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a prescription record for a patient
// (POST /prescriptions)
func (_ Unimplemented) CreatePrescription(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete prescription
// (DELETE /prescriptions/{prescriptionId})
func (_ Unimplemented) DeletePrescription(w http.ResponseWriter, r *http.Request, prescriptionId PathPrescriptionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Prescription detail
// (GET /prescriptions/{prescriptionId})
func (_ Unimplemented) PrescriptionDetail(w http.ResponseWriter, r *http.Request, prescriptionId PathPrescriptionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update prescription
// (PATCH /prescriptions/{prescriptionId})
func (_ Unimplemented) UpdatePrescription(w http.ResponseWriter, r *http.Request, prescriptionId PathPrescriptionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetPrescriptionsByPatientAndRange operation middleware
func (siw *ServerInterfaceWrapper) GetPrescriptionsByPatientAndRange(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPrescriptionsByPatientAndRangeParams

	// ------------- Required query parameter "patientId" -------------

	if paramValue := r.URL.Query().Get("patientId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "patientId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "patientId", r.URL.Query(), &params.PatientId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "patientId", Err: err})
		return
	}

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Required query parameter "to" -------------

	if paramValue := r.URL.Query().Get("to"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "to"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPrescriptionsByPatientAndRange(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePrescription operation middleware
func (siw *ServerInterfaceWrapper) CreatePrescription(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePrescription(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePrescription operation middleware
func (siw *ServerInterfaceWrapper) DeletePrescription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "prescriptionId" -------------
	var prescriptionId PathPrescriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "prescriptionId", chi.URLParam(r, "prescriptionId"), &prescriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "prescriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePrescription(w, r, prescriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PrescriptionDetail operation middleware
func (siw *ServerInterfaceWrapper) PrescriptionDetail(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "prescriptionId" -------------
	var prescriptionId PathPrescriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "prescriptionId", chi.URLParam(r, "prescriptionId"), &prescriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "prescriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PrescriptionDetail(w, r, prescriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePrescription operation middleware
func (siw *ServerInterfaceWrapper) UpdatePrescription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "prescriptionId" -------------
	var prescriptionId PathPrescriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "prescriptionId", chi.URLParam(r, "prescriptionId"), &prescriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "prescriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePrescription(w, r, prescriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/prescriptions", wrapper.GetPrescriptionsByPatientAndRange)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/prescriptions", wrapper.CreatePrescription)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/prescriptions/{prescriptionId}", wrapper.DeletePrescription)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/prescriptions/{prescriptionId}", wrapper.PrescriptionDetail)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/prescriptions/{prescriptionId}", wrapper.UpdatePrescription)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"jk3CDetHscYbxuPqvwEAAP//WJFt6VYhAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
