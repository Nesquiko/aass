// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AppointmentStatus.
const (
	Cancelled AppointmentStatus = "cancelled"
	Completed AppointmentStatus = "completed"
	Denied    AppointmentStatus = "denied"
	Requested AppointmentStatus = "requested"
	Scheduled AppointmentStatus = "scheduled"
)

// Defines values for AppointmentType.
const (
	RegularCheck AppointmentType = "regular_check"
)

// Defines values for SpecializationEnum.
const (
	Cardiologist        SpecializationEnum = "cardiologist"
	Dermatologist       SpecializationEnum = "dermatologist"
	Diagnostician       SpecializationEnum = "diagnostician"
	Endocrinologist     SpecializationEnum = "endocrinologist"
	Gastroenterologist  SpecializationEnum = "gastroenterologist"
	GeneralPractitioner SpecializationEnum = "general_practitioner"
	Neurologist         SpecializationEnum = "neurologist"
	Oncologist          SpecializationEnum = "oncologist"
	Orthopedist         SpecializationEnum = "orthopedist"
	Other               SpecializationEnum = "other"
	Pediatrician        SpecializationEnum = "pediatrician"
	Psychiatrist        SpecializationEnum = "psychiatrist"
	Radiologist         SpecializationEnum = "radiologist"
	Surgeon             SpecializationEnum = "surgeon"
	Urologist           SpecializationEnum = "urologist"
)

// Defines values for TimeSlotStatus.
const (
	Available   TimeSlotStatus = "available"
	Unavailable TimeSlotStatus = "unavailable"
)

// Defines values for UserRole.
const (
	UserRoleDoctor UserRole = "doctor"
)

// AppointmentDisplay Represents an appointment view.
type AppointmentDisplay struct {
	AppointmentDateTime time.Time          `json:"appointmentDateTime"`
	DoctorName          string             `json:"doctorName"`
	Id                  openapi_types.UUID `json:"id"`
	PatientName         string             `json:"patientName"`
	Status              AppointmentStatus  `json:"status"`
	Type                AppointmentType    `json:"type"`
}

// AppointmentStatus defines model for AppointmentStatus.
type AppointmentStatus string

// AppointmentType defines model for AppointmentType.
type AppointmentType string

// Doctor defines model for Doctor.
type Doctor struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	LastName  string              `json:"lastName"`
	Role      *UserRole           `json:"role,omitempty"`

	// Specialization Medical specialization of a doctor.
	Specialization SpecializationEnum `json:"specialization"`
}

// DoctorCalendar defines model for DoctorCalendar.
type DoctorCalendar struct {
	Appointments *[]AppointmentDisplay `json:"appointments,omitempty"`
}

// ErrorDetail Standardized error details (RFC 9457).
type ErrorDetail struct {
	Code                 string                 `json:"code"`
	Detail               string                 `json:"detail"`
	Status               int                    `json:"status"`
	Title                string                 `json:"title"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NewDoctorRequest defines model for NewDoctorRequest.
type NewDoctorRequest struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`

	// Specialization Medical specialization of a doctor.
	Specialization SpecializationEnum `json:"specialization"`
}

// Patient defines model for Patient.
type Patient struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	LastName  string              `json:"lastName"`
	Role      *UserRole           `json:"role,omitempty"`
}

// SpecializationEnum Medical specialization of a doctor.
type SpecializationEnum string

// TimeSlot Represents a single time slot for a doctor on a specific day.
type TimeSlot struct {
	Status TimeSlotStatus `json:"status"`
	Time   string         `json:"time"`
}

// TimeSlotStatus defines model for TimeSlot.Status.
type TimeSlotStatus string

// UserRole defines model for UserRole.
type UserRole string

// Date defines model for date.
type Date = openapi_types.Date

// DateTime defines model for dateTime.
type DateTime = time.Time

// DoctorEmail defines model for doctorEmail.
type DoctorEmail = openapi_types.Email

// DoctorId defines model for doctorId.
type DoctorId = openapi_types.UUID

// From defines model for from.
type From = openapi_types.Date

// To defines model for to.
type To = openapi_types.Date

// DoctorTimeslots defines model for DoctorTimeslots.
type DoctorTimeslots struct {
	Slots []TimeSlot `json:"slots"`
}

// Doctors defines model for Doctors.
type Doctors struct {
	Doctors []Doctor `json:"doctors"`
}

// InternalServerErrorResponse Standardized error details (RFC 9457).
type InternalServerErrorResponse = ErrorDetail

// AvailableDoctorsParams defines parameters for AvailableDoctors.
type AvailableDoctorsParams struct {
	// DateTime The specific date and time (ISO 8601 format).
	DateTime DateTime `form:"dateTime" json:"dateTime"`
}

// DoctorsCalendarParams defines parameters for DoctorsCalendar.
type DoctorsCalendarParams struct {
	// From The start date (inclusive) for retrieving resources (YYYY-MM-DD format).
	From From `form:"from" json:"from"`

	// To The end date (inclusive) for retrieving resources (YYYY-MM-DD format).
	To *To `form:"to,omitempty" json:"to,omitempty"`
}

// DoctorsTimeslotsParams defines parameters for DoctorsTimeslots.
type DoctorsTimeslotsParams struct {
	// Date The specific day (YYYY-MM-DD format).
	Date Date `form:"date" json:"date"`
}

// CreateDoctorJSONRequestBody defines body for CreateDoctor for application/json ContentType.
type CreateDoctorJSONRequestBody = NewDoctorRequest

// Getter for additional properties for ErrorDetail. Returns the specified
// element and whether it was found
func (a ErrorDetail) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail
func (a *ErrorDetail) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a *ErrorDetail) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["code"]; found {
		err = json.Unmarshal(raw, &a.Code)
		if err != nil {
			return fmt.Errorf("error reading 'code': %w", err)
		}
		delete(object, "code")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail to handle AdditionalProperties
func (a ErrorDetail) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["code"], err = json.Marshal(a.Code)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'code': %w", err)
	}

	object["detail"], err = json.Marshal(a.Detail)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'detail': %w", err)
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	object["title"], err = json.Marshal(a.Title)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'title': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get doctors
	// (GET /doctors)
	GetDoctors(w http.ResponseWriter, r *http.Request)
	// Create a new doctor profile
	// (POST /doctors)
	CreateDoctor(w http.ResponseWriter, r *http.Request)
	// Get doctors available at date-time
	// (GET /doctors/available)
	AvailableDoctors(w http.ResponseWriter, r *http.Request, params AvailableDoctorsParams)
	// Get doctor by email
	// (GET /doctors/email/{email})
	GetDoctorByEmail(w http.ResponseWriter, r *http.Request, email DoctorEmail)
	// Get doctor by ID
	// (GET /doctors/{doctorId})
	GetDoctorById(w http.ResponseWriter, r *http.Request, doctorId DoctorId)
	// Get doctors's calendar (Data provided by Appointment Service, Aggregated by Gateway)
	// (GET /doctors/{doctorId}/calendar)
	DoctorsCalendar(w http.ResponseWriter, r *http.Request, doctorId DoctorId, params DoctorsCalendarParams)
	// Get doctor's timeslots for a specific date
	// (GET /doctors/{doctorId}/timeslots)
	DoctorsTimeslots(w http.ResponseWriter, r *http.Request, doctorId DoctorId, params DoctorsTimeslotsParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get doctors
// (GET /doctors)
func (_ Unimplemented) GetDoctors(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new doctor profile
// (POST /doctors)
func (_ Unimplemented) CreateDoctor(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get doctors available at date-time
// (GET /doctors/available)
func (_ Unimplemented) AvailableDoctors(w http.ResponseWriter, r *http.Request, params AvailableDoctorsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get doctor by email
// (GET /doctors/email/{email})
func (_ Unimplemented) GetDoctorByEmail(w http.ResponseWriter, r *http.Request, email DoctorEmail) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get doctor by ID
// (GET /doctors/{doctorId})
func (_ Unimplemented) GetDoctorById(w http.ResponseWriter, r *http.Request, doctorId DoctorId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get doctors's calendar (Data provided by Appointment Service, Aggregated by Gateway)
// (GET /doctors/{doctorId}/calendar)
func (_ Unimplemented) DoctorsCalendar(w http.ResponseWriter, r *http.Request, doctorId DoctorId, params DoctorsCalendarParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get doctor's timeslots for a specific date
// (GET /doctors/{doctorId}/timeslots)
func (_ Unimplemented) DoctorsTimeslots(w http.ResponseWriter, r *http.Request, doctorId DoctorId, params DoctorsTimeslotsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDoctors operation middleware
func (siw *ServerInterfaceWrapper) GetDoctors(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDoctors(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateDoctor operation middleware
func (siw *ServerInterfaceWrapper) CreateDoctor(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDoctor(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AvailableDoctors operation middleware
func (siw *ServerInterfaceWrapper) AvailableDoctors(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AvailableDoctorsParams

	// ------------- Required query parameter "dateTime" -------------

	if paramValue := r.URL.Query().Get("dateTime"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "dateTime"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "dateTime", r.URL.Query(), &params.DateTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dateTime", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AvailableDoctors(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDoctorByEmail operation middleware
func (siw *ServerInterfaceWrapper) GetDoctorByEmail(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "email" -------------
	var email DoctorEmail

	err = runtime.BindStyledParameterWithOptions("simple", "email", chi.URLParam(r, "email"), &email, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDoctorByEmail(w, r, email)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDoctorById operation middleware
func (siw *ServerInterfaceWrapper) GetDoctorById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "doctorId" -------------
	var doctorId DoctorId

	err = runtime.BindStyledParameterWithOptions("simple", "doctorId", chi.URLParam(r, "doctorId"), &doctorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "doctorId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDoctorById(w, r, doctorId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DoctorsCalendar operation middleware
func (siw *ServerInterfaceWrapper) DoctorsCalendar(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "doctorId" -------------
	var doctorId DoctorId

	err = runtime.BindStyledParameterWithOptions("simple", "doctorId", chi.URLParam(r, "doctorId"), &doctorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "doctorId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DoctorsCalendarParams

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DoctorsCalendar(w, r, doctorId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DoctorsTimeslots operation middleware
func (siw *ServerInterfaceWrapper) DoctorsTimeslots(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "doctorId" -------------
	var doctorId DoctorId

	err = runtime.BindStyledParameterWithOptions("simple", "doctorId", chi.URLParam(r, "doctorId"), &doctorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "doctorId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DoctorsTimeslotsParams

	// ------------- Required query parameter "date" -------------

	if paramValue := r.URL.Query().Get("date"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "date"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date", r.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DoctorsTimeslots(w, r, doctorId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/doctors", wrapper.GetDoctors)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/doctors", wrapper.CreateDoctor)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/doctors/available", wrapper.AvailableDoctors)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/doctors/email/{email}", wrapper.GetDoctorByEmail)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/doctors/{doctorId}", wrapper.GetDoctorById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/doctors/{doctorId}/calendar", wrapper.DoctorsCalendar)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/doctors/{doctorId}/timeslots", wrapper.DoctorsTimeslots)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"skkznicAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
