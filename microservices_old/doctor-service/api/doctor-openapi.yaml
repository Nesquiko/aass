openapi: 3.0.4
info:
  title: Doctor Service API
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - description: Doctor Service Endpoint
    url: / # Base path handled by gateway routing
tags:
  - name: Doctors
paths:
  /doctors: # Corresponds to /api/doctors
    get:
      tags:
        - Doctors
      summary: Get doctors
      description: Retrieves a list of all doctors.
      operationId: getDoctors
      responses:
        "200":
          $ref: "#/components/responses/Doctors"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
    post: # New endpoint for creating doctors
      tags:
        - Doctors
      summary: Create a new doctor profile
      description: Creates a new doctor record. This might be called internally after successful registration in the Auth service.
      operationId: createDoctor
      requestBody:
        description: Details of the doctor to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewDoctorRequest"
            examples:
              newDoctor:
                summary: Example new doctor request
                value:
                  email: gregory.house@example.com
                  firstName: Gregory
                  lastName: House
                  specialization: diagnostician
      responses:
        "201":
          description: Doctor profile created successfully. Returns the created doctor object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "409":
          description: Conflict - A doctor with the provided email already exists.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
              examples:
                duplicateEmail:
                  summary: Example duplicate email error (409)
                  value:
                    title: Conflict
                    status: 409
                    code: doctor.email-exists
                    detail: A doctor with email gregory.house@example.com already exists.
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /doctors/available: # Corresponds to /api/doctors/available
    get:
      tags:
        - Doctors
      summary: Get doctors available at date-time
      description: Retrieves list of doctors which are available on the date and in the given time
      operationId: availableDoctors
      parameters:
        - $ref: "#/components/parameters/dateTime" # Reference updated parameter name
      responses:
        "200":
          description: Successfully retrieved doctor details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  doctors:
                    type: array
                    items:
                      $ref: "#/components/schemas/Doctor"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /doctors/email/{email}: # <<< NEW PATH for lookup by email
    get:
      tags:
        - Doctors
      summary: Get doctor by email
      description: Retrieves the details of a specific doctor by their unique email address.
      operationId: getDoctorByEmail
      parameters:
        - $ref: "#/components/parameters/doctorEmail" # Reference the new parameter
      responses:
        "200":
          description: Successfully retrieved doctor details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "404":
          description: Not Found - No doctor with the specified email address exists.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
              examples:
                doctorEmailNotFound:
                  summary: Example doctor email not found (404)
                  value:
                    title: Resource Not Found
                    status: 404
                    code: doctor.email-not-found # Specific error code
                    detail: Doctor with email unknown.doctor@example.com not found.
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /doctors/{doctorId}: # Corresponds to /api/doctors/{doctorId}
    get:
      tags:
        - Doctors
      summary: Get doctor by ID
      description: Retrieves the details of a specific doctor by their unique identifier.
      operationId: getDoctorById
      parameters:
        - $ref: "#/components/parameters/doctorId"
      responses:
        "200":
          description: Successfully retrieved doctor details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "404":
          description: Not Found - The specified doctor ID does not exist.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
              examples:
                doctorNotFound:
                  summary: Example doctor not found (404)
                  value:
                    title: Resource Not Found
                    status: 404
                    code: doctor.not-found
                    detail: Doctor with ID b2c3d4e5-f6a7-8901-2345-67890abcdef1 not found.
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /doctors/{doctorId}/calendar: # Corresponds to /api/doctors/{doctorId}/calendar
    get:
      tags:
        - Doctors
      summary: Get doctors's calendar (Data provided by Appointment Service, Aggregated by Gateway)
      description: Retrieves appointments for a doctor in a given time period. This endpoint likely relies on data fetched by the gateway from the Appointment service.
      operationId: doctorsCalendar
      parameters:
        - $ref: "#/components/parameters/doctorId"
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/to"
      responses:
        "200":
          description: Returned doctor's calendar for a given time period
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorCalendar"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /doctors/{doctorId}/timeslots: # Corresponds to /api/doctors/{doctorId}/timeslots
    get:
      tags:
        - Doctors
      summary: Get doctor's timeslots for a specific date
      description: Retrieves a list of available and unavailable time slots for a given doctor ID and date.
      operationId: doctorsTimeslots
      parameters:
        - $ref: "#/components/parameters/doctorId"
        - $ref: "#/components/parameters/date"
      responses:
        "200":
          $ref: "#/components/responses/DoctorTimeslots"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

components:
  schemas:
    # ... (UserRole, Patient, SpecializationEnum, NewDoctorRequest, Doctor, TimeSlot, etc. remain the same) ...
    UserRole:
      type: string
      enum:
        - doctor
      default: doctor
      readOnly: true
    Patient:
      type: object
      required:
        - id
        - firstName
        - lastName
        - email
        - role
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        role:
          $ref: "#/components/schemas/UserRole"
    SpecializationEnum:
      type: string
      description: Medical specialization of a doctor.
      enum:
        - surgeon
        - gastroenterologist
        - pediatrician
        - diagnostician
        - endocrinologist
        - general_practitioner
        - cardiologist
        - dermatologist
        - neurologist
        - oncologist
        - orthopedist
        - psychiatrist
        - radiologist
        - urologist
        - other
      example: diagnostician
    NewDoctorRequest:
      type: object
      required:
        - email
        - firstName
        - lastName
        - specialization
      properties:
        email:
          type: string
          format: email
          example: gregory.house@example.com
        firstName:
          type: string
          minLength: 1
          example: Gregory
        lastName:
          type: string
          minLength: 1
          example: House
        specialization:
          $ref: "#/components/schemas/SpecializationEnum"
    Doctor:
      allOf:
        - $ref: "#/components/schemas/Patient"
        - type: object
          required:
            - specialization
          properties:
            specialization:
              $ref: "#/components/schemas/SpecializationEnum"
    TimeSlot:
      type: object
      description: Represents a single time slot for a doctor on a specific day.
      properties:
        time:
          type: string
          pattern: ^([01]\d|2[0-3]):([0-5]\d)$
          example: "09:30"
        status:
          type: string
          enum:
            - available
            - unavailable
          example: available
      required:
        - time
        - status
    AppointmentStatus:
      type: string
      enum:
        - requested
        - cancelled
        - scheduled
        - completed
        - denied
      example: scheduled
    AppointmentType:
      type: string
      enum:
        - regular_check
    AppointmentDisplay:
      type: object
      description: Represents an appointment view.
      properties:
        id:
          type: string
          format: uuid
        appointmentDateTime:
          type: string
          format: date-time
        doctorName:
          type: string
        patientName:
          type: string
        status:
          $ref: "#/components/schemas/AppointmentStatus"
        type:
          $ref: "#/components/schemas/AppointmentType"
      required:
        - id
        - appointmentDateTime
        - doctorName
        - patientName
        - status
        - type
    DoctorCalendar:
      type: object
      properties:
        appointments:
          type: array
          items:
            $ref: "#/components/schemas/AppointmentDisplay"
    ErrorDetail:
      type: object
      description: Standardized error details (RFC 9457).
      properties:
        title:
          type: string
        code:
          type: string
        status:
          type: integer
          format: int
        detail:
          type: string
      additionalProperties: true
      required:
        - title
        - code
        - status
        - detail

  parameters:
    doctorId:
      name: doctorId
      in: path
      required: true
      description: The unique identifier (UUID) of the doctor.
      schema:
        type: string
        format: uuid
      example: b2c3d4e5-f6a7-8901-2345-67890abcdef1
    doctorEmail: # <<< NEW PARAMETER DEFINITION
      name: email
      in: path
      required: true
      description: The unique email address of the doctor.
      schema:
        type: string
        format: email # Use email format validation
      example: gregory.house@example.com
    date:
      name: date
      in: query
      required: true
      description: The specific day (YYYY-MM-DD format).
      schema:
        type: string
        format: date
      example: "2024-07-15"
    dateTime: # Renamed from date-time for consistency/clarity
      name: dateTime # Changed name from date-time
      in: query
      required: true
      description: The specific date and time (ISO 8601 format).
      schema:
        type: string
        format: date-time # Keep format as date-time
      example: "2024-07-15T10:30:00Z"
    from:
      name: from
      in: query
      required: true
      description: The start date (inclusive) for retrieving resources (YYYY-MM-DD format).
      schema:
        type: string
        format: date
      example: "2024-07-15"
    to:
      name: to
      in: query
      description: The end date (inclusive) for retrieving resources (YYYY-MM-DD format).
      schema:
        type: string
        format: date
      example: "2024-07-20"

  responses:
    InternalServerErrorResponse:
      description: An error occurred. See specific status code for details.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorDetail"
          example:
            title: Internal server error
            status: 500
            code: internal.server.error
            detail: An unknown server error occurred
    Doctors:
      description: Successfully retrieved list of doctors.
      content:
        application/json:
          schema:
            type: object
            required:
              - doctors
            properties:
              doctors:
                type: array
                items:
                  $ref: "#/components/schemas/Doctor"
    DoctorTimeslots:
      description: Successfully retrieved the list of time slots.
      content:
        application/json:
          schema:
            type: object
            required:
              - slots
            properties:
              slots:
                type: array
                items:
                  $ref: "#/components/schemas/TimeSlot"
