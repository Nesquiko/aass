worker_processes auto;
pid /var/run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    types_hash_max_size 2048;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Docker internal DNS resolver
    resolver 127.0.0.11 valid=30s;

    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/problem+json application/javascript text/xml application/xml application/xml+rss text/javascript;

    server {
        listen 80;
        server_name localhost;

        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;

        location = / {
            return 200 'API Gateway is running\n';
            add_header Content-Type text/plain;
        }

        # --- Proxy to User Service ---
        # Match paths starting with /api/auth, /api/patients, /api/doctors
        location ~ ^/api/(auth|patients|doctors)(/.*)?$ {
            set $upstream_userservice user-service:8080;

            # Rewrite the URI passed to the backend: remove /api prefix
            # Example: /api/auth/login -> /auth/login
            rewrite ^/api/(.*)$ /$1 break; # $1 captures everything after /api

            proxy_pass http://$upstream_userservice; # Pass the rewritten URI

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # --- Proxy to Resource Service ---
        # Match paths starting with /api/resources
        location ~ ^/api/resources(/.*)?$ {
            set $upstream_resourceservice resource-service:8080;

            # Rewrite the URI passed to the backend: remove /api prefix
            # Example: /api/resources/available -> /resources/available
            rewrite ^/api/(.*)$ /$1 break; # $1 captures everything after /api

            proxy_pass http://$upstream_resourceservice; # Pass the rewritten URI

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

		# --- Proxy to Medical Service ---
		# Match paths starting with /api/conditions or /api/prescriptions
		location ~ ^/api/(conditions|prescriptions)(/.*)?$ {
			set $upstream_medicalservice medical-service:8080;
			rewrite ^/api/(.*)$ /$1 break; # Remove /api prefix
			proxy_pass http://$upstream_medicalservice; # Pass rewritten URI

			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
		}

        # --- Proxy to Appointment Service ---
        # Match paths starting with /api/appointments or /api/timeslots
        location ~ ^/api/(appointments|timeslots)(/.*)?$ {
            set $upstream_appointmentservice appointment-service:8080;
            rewrite ^/api/(.*)$ /$1 break; # Remove /api prefix
            proxy_pass http://$upstream_appointmentservice; # Pass rewritten URI

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # --- Fallback for unmatched /api routes (optional: return 404) ---
        location /api/ {
            # If a request starts with /api/ but doesn't match the specific
            # service locations above, return a 404.
            return 404 '{"error": "Not Found", "message": "API endpoint not found."}\n';
            add_header Content-Type application/json;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        }

        # --- Error Handling (for 5xx errors from gateway or backend) ---
        proxy_intercept_errors on; # Intercept errors from the upstream services
        error_page 500 502 503 504 /50x.json;
        location = /50x.json {
             root /usr/share/nginx/html; # Make sure this path exists or adjust
             internal;
             default_type application/json;

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;

            # Handle OPTIONS preflight requests for the error endpoint itself
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                return 204;
            }
             return 500 '{"error": "Gateway Error", "message": "An error occurred processing your request via the gateway."}';
        }
    }
}
